{
    "docs": [
        {
            "location": "/index.html", 
            "text": "TACO\n is a library for performing sparse and\ndense linear algebra and tensor algebra computations. The computations can\nrange from relatively simple ones like sparse matrix-vector multiplication to\nmore complex ones like matricized tensor times Khatri-Rao product.  All these\ncomputations can be performed on any mix of dense and sparse tensors. Under the\nhood, TACO automatically generates efficient code to perform these\ncomputations.\n\n\nThe sidebar to the left links to documentation for the TACO Python library as\nwell as some examples demonstrating how TACO can be used in real-world\napplications.\n\n\nSystem Requirements\n\n\n\n\nA C compiler that supports C99 and OpenMP (if parallel execution is desired), such as GCC or Clang.\n\n\nPython 3 with NumPy and SciPy.\n\n\n\n\nGetting Help\n\n\nQuestions and bug reports can be submitted \nhere\n.", 
            "title": "Home"
        }, 
        {
            "location": "/index.html#system-requirements", 
            "text": "A C compiler that supports C99 and OpenMP (if parallel execution is desired), such as GCC or Clang.  Python 3 with NumPy and SciPy.", 
            "title": "System Requirements"
        }, 
        {
            "location": "/index.html#getting-help", 
            "text": "Questions and bug reports can be submitted  here .", 
            "title": "Getting Help"
        }, 
        {
            "location": "/pytensors/index.html", 
            "text": "Declaring Tensors\n\n\npytaco.Tensor\n objects correspond to mathematical tensors. You can can declare a new tensor by specifying its name, a vector with the size of each dimension and the \nstorage format\n that will be used to store the tensor and a \ndatatype\n:\n\n\n# Import the pytaco library\nimport pytaco as pt\n# Import the storage formats to save some typing\nfrom pytaco import dense, compressed\n\n# Declare a new tensor \nA\n of double-precision floats with dimensions \n# 512 x 64 x 2048, stored as a dense-sparse-sparse tensor\nA = pt.tensor(\nA\n, [512, 64, 2048], pt.format([dense, compressed, compressed]), pt.float64)\n\n\n\n\nThe name of the tensor can be omitted, in which case taco will assign an arbitrary name to the tensor:\n\n\nimport pytaco as pt\nfrom pytaco import dense, compressed\n\n# Declare a tensor with the same dimensions, storage format and type as before\nA = pt.tensor([512, 64, 2048], pt.format([dense, compressed, compressed]), pt.float64)\n\n\n\n\nThe \ndatatype\n can also be omitted in which case taco will default to using \npt.float32\n:\n\n\nimport pytaco as pt\nfrom pytaco import dense, compressed\n\n# Declare a tensor with the same dimensions and storage format as before\nA = pt.tensor([512, 64, 2048], pt.format([dense, compressed, compressed]))\n\n\n\n\nA single format can be given to create a tensor where all dimensions have that format:\n\n\nimport pytaco as pt\nfrom pytaco import dense, compressed\n\n# Declare a dense tensor\nA = pt.tensor([512, 64, 2048], dense)\n\n# Declare a compressed tensor\nB = pt.tensor([512, 64, 2048], compressed)\n\n\n\n\nScalars, which are treated as order-0 tensors, can be declared and initialized with some arbitrary value as demonstrated below:\n\n\nimport pytaco as pt\nfrom pytaco import dense, compressed\n\n# Declare a scalar\naplha = pt.tensor(42.0)\n\n\n\n\nDefining Tensor Formats\n\n\nConceptually, you can think of a tensor as a tree with each level (excluding the root) corresponding to a dimension of the tensor. Each path from the root to a leaf node represents a tensor coordinate and its corresponding value. Which dimension each level of the tree corresponds to is determined by the order in which dimensions of the tensor are stored.\n\n\ntaco uses a novel scheme that can describe different storage formats for any tensor by specifying the order in which tensor dimensions are stored and whether each dimension is sparse or dense. A sparse dimension stores only the subset of the dimension that contains non-zero values and is conceptually similar to the index arrays used in the compressed sparse row (CSR) matrix format, while a dense dimension stores both zeros and non-zeros. As demonstrated below, this scheme is flexibile enough to express many commonly-used matrix storage formats.\n\n\nYou can define a new tensor storage format by creating a \npytaco.format\n object. The constructor for \npytaco.format\n takes as arguments a list specifying the type of each dimension and (optionally) a list specifying the order in which dimensions are to be stored, as seen below:\n\n\nimport pytaco as pt\nfrom pytaco import dense, compressed, format\ndm   = format([dense, dense])                   # (Row-major) dense matrix\ncsr  = format([dense, compressed])              # Compressed sparse row matrix\ncsc  = format([dense, compressed], [1, 0])      # Compressed sparse column matrix\ndcsr = format([compressed, compressed], [1, 0]) # Doubly compressed sparse column matrix\n\n\n\n\npytaco\n provides common formats (csr, csc and csf) by default and can be used by simply typing \npt.csr\n, \npt.csc\n or \npt.csf\n.\n\n\nTensor Datatypes\n\n\nTensors can be of 10 different datatypes. The following are the possible tensor datatypes:\n\n\nSigned Integers:\n\n\npytaco.int8\n\n\npytaco.int16\n\n\npytaco.int32\n\n\npytaco.int64\n\n\nUnsigned Integers:\n\n\npytaco.uint8\n\n\npytaco.uint16\n\n\npytaco.uint32\n\n\npytaco.uint64\n\n\nFloating point precision: \n\n\npytaco.float32\n \n\n\npytaco.float\n\n\nDouble precision: \n\n\npytaco.float64\n \n\n\npytaco.double\n\n\nInitializing Tensors\n\n\nTensors can be made by using python indexing syntax. For example, one may write the following:\n\n\nimport pytaco as pt\nfrom pytaco import dense, compressed\n\n# Declare a dense tensor\nA = pt.tensor([512, 64, 2048], compressed)\n\n# Set location (0, 1, 0) in A to 42.0\nA[0, 1, 0] = 42.0\n\n\n\n\nThe insert operator adds the inserted non-zeros to a temporary buffer. Before a tensor can actually be used in a computation, it is automatcally packed. \n\n\nFor most cases, this is not necessary but you may also invoke the \npack\n method to compress the tensor into the storage format that was specified after all values have been inserted.\n\n\nNOTE: Multidimensional indexing (as used with lists) are NOT supported. For example, the following is invalid code:\n\n\nimport pytaco as pt\nfrom pytaco import dense, compressed\n\n# Declare a dense tensor\nA = pt.tensor([512, 64, 2048], compressed)\n\n# INVALID STATEMENT\nA[0][1][0] = 42.0\n\n\n\n\nLoading Tensors from File\n\n\nRather than manually invoking building a tensor, you can load tensors directly from file by calling \npytaco.read\n as demonstrated below:\n\n\nimport pytaco as pt\nfrom pytaco import dense, compressed, format\n\n# Load a dense-sparse-sparse tensor from file A.tns\nA = pt.read(\nA.tns\n, format([dense, compressed, compressed]))\n\n\n\n\nBy default, \npytaco.read\n returns a packed tensor. You can optionally pass a Boolean flag as an argument to indicate whether the returned tensor should be packed or not: \n\n\nimport pytaco as pt\nfrom pytaco import dense, compressed, format\n\n# Load an unpacked tensor from file A.tns\nA = pt.read(\nA.tns\n, format([dense, compressed, compressed]), false)\n\n\n\n\nNOTE: the tensor will be packed anyway before any computation is actually performed.\n\n\nCurrently, taco supports loading from the following matrix and tensor file formats:\n\n\n\n\nMatrix Market (Coordinate) Format (.mtx)\n\n\nRutherford-Boeing Format (.rb)\n\n\nFROSTT Format (.tns)\n\n\n\n\nWriting Tensors to Files\n\n\nYou can also write a (packed) tensor directly to file by calling \npytaco.write\n, as demonstrated below:\n\n\nimport pytaco as pt\n\nA = pt.tensor([512, 64, 2048], compressed)\nA[0, 1, 0] = 42.0\nA[1, 1, 1] = 77\npt.write(\nA.tns\n, A);  # Write tensor A to file A.tns\n\n\n\n\npytaco.write\n supports the same set of matrix and tensor file formats as \npytaco.read\n.\n\n\nI/O with Numpy or Scipy\n\n\nTensors can be initialized with either numpy arrays or scipy sparse CSC or CSR matrices. As such, we can use the I/O from numpy and scipy and feed the data into pytaco by initializing a tensor.\n\n\nimport pytaco as pt\nimport numpy as np\nimport scipy.sparse\n\n# Assuming matrix is CSR\nsparse_matrix = scipy.sparse.load_npz('sparse_matrix.npz')\n\n# Pass data into taco for use\ntaco_tensor = pt.from_scipy_csr(sparse_matrix)\n\n# We can also load a numpy array\nnp_array = np.load('arr.npy')\n\n# And initialize a tensor from this array\ndense_tensor = pt.from_numpy_array(np_array)", 
            "title": "Defining Tensors"
        }, 
        {
            "location": "/pytensors/index.html#declaring-tensors", 
            "text": "pytaco.Tensor  objects correspond to mathematical tensors. You can can declare a new tensor by specifying its name, a vector with the size of each dimension and the  storage format  that will be used to store the tensor and a  datatype :  # Import the pytaco library\nimport pytaco as pt\n# Import the storage formats to save some typing\nfrom pytaco import dense, compressed\n\n# Declare a new tensor  A  of double-precision floats with dimensions \n# 512 x 64 x 2048, stored as a dense-sparse-sparse tensor\nA = pt.tensor( A , [512, 64, 2048], pt.format([dense, compressed, compressed]), pt.float64)  The name of the tensor can be omitted, in which case taco will assign an arbitrary name to the tensor:  import pytaco as pt\nfrom pytaco import dense, compressed\n\n# Declare a tensor with the same dimensions, storage format and type as before\nA = pt.tensor([512, 64, 2048], pt.format([dense, compressed, compressed]), pt.float64)  The  datatype  can also be omitted in which case taco will default to using  pt.float32 :  import pytaco as pt\nfrom pytaco import dense, compressed\n\n# Declare a tensor with the same dimensions and storage format as before\nA = pt.tensor([512, 64, 2048], pt.format([dense, compressed, compressed]))  A single format can be given to create a tensor where all dimensions have that format:  import pytaco as pt\nfrom pytaco import dense, compressed\n\n# Declare a dense tensor\nA = pt.tensor([512, 64, 2048], dense)\n\n# Declare a compressed tensor\nB = pt.tensor([512, 64, 2048], compressed)  Scalars, which are treated as order-0 tensors, can be declared and initialized with some arbitrary value as demonstrated below:  import pytaco as pt\nfrom pytaco import dense, compressed\n\n# Declare a scalar\naplha = pt.tensor(42.0)", 
            "title": "Declaring Tensors"
        }, 
        {
            "location": "/pytensors/index.html#defining-tensor-formats", 
            "text": "Conceptually, you can think of a tensor as a tree with each level (excluding the root) corresponding to a dimension of the tensor. Each path from the root to a leaf node represents a tensor coordinate and its corresponding value. Which dimension each level of the tree corresponds to is determined by the order in which dimensions of the tensor are stored.  taco uses a novel scheme that can describe different storage formats for any tensor by specifying the order in which tensor dimensions are stored and whether each dimension is sparse or dense. A sparse dimension stores only the subset of the dimension that contains non-zero values and is conceptually similar to the index arrays used in the compressed sparse row (CSR) matrix format, while a dense dimension stores both zeros and non-zeros. As demonstrated below, this scheme is flexibile enough to express many commonly-used matrix storage formats.  You can define a new tensor storage format by creating a  pytaco.format  object. The constructor for  pytaco.format  takes as arguments a list specifying the type of each dimension and (optionally) a list specifying the order in which dimensions are to be stored, as seen below:  import pytaco as pt\nfrom pytaco import dense, compressed, format\ndm   = format([dense, dense])                   # (Row-major) dense matrix\ncsr  = format([dense, compressed])              # Compressed sparse row matrix\ncsc  = format([dense, compressed], [1, 0])      # Compressed sparse column matrix\ndcsr = format([compressed, compressed], [1, 0]) # Doubly compressed sparse column matrix  pytaco  provides common formats (csr, csc and csf) by default and can be used by simply typing  pt.csr ,  pt.csc  or  pt.csf .", 
            "title": "Defining Tensor Formats"
        }, 
        {
            "location": "/pytensors/index.html#tensor-datatypes", 
            "text": "Tensors can be of 10 different datatypes. The following are the possible tensor datatypes:  Signed Integers:  pytaco.int8  pytaco.int16  pytaco.int32  pytaco.int64  Unsigned Integers:  pytaco.uint8  pytaco.uint16  pytaco.uint32  pytaco.uint64  Floating point precision:   pytaco.float32    pytaco.float  Double precision:   pytaco.float64    pytaco.double", 
            "title": "Tensor Datatypes"
        }, 
        {
            "location": "/pytensors/index.html#initializing-tensors", 
            "text": "Tensors can be made by using python indexing syntax. For example, one may write the following:  import pytaco as pt\nfrom pytaco import dense, compressed\n\n# Declare a dense tensor\nA = pt.tensor([512, 64, 2048], compressed)\n\n# Set location (0, 1, 0) in A to 42.0\nA[0, 1, 0] = 42.0  The insert operator adds the inserted non-zeros to a temporary buffer. Before a tensor can actually be used in a computation, it is automatcally packed.   For most cases, this is not necessary but you may also invoke the  pack  method to compress the tensor into the storage format that was specified after all values have been inserted.  NOTE: Multidimensional indexing (as used with lists) are NOT supported. For example, the following is invalid code:  import pytaco as pt\nfrom pytaco import dense, compressed\n\n# Declare a dense tensor\nA = pt.tensor([512, 64, 2048], compressed)\n\n# INVALID STATEMENT\nA[0][1][0] = 42.0", 
            "title": "Initializing Tensors"
        }, 
        {
            "location": "/pytensors/index.html#loading-tensors-from-file", 
            "text": "Rather than manually invoking building a tensor, you can load tensors directly from file by calling  pytaco.read  as demonstrated below:  import pytaco as pt\nfrom pytaco import dense, compressed, format\n\n# Load a dense-sparse-sparse tensor from file A.tns\nA = pt.read( A.tns , format([dense, compressed, compressed]))  By default,  pytaco.read  returns a packed tensor. You can optionally pass a Boolean flag as an argument to indicate whether the returned tensor should be packed or not:   import pytaco as pt\nfrom pytaco import dense, compressed, format\n\n# Load an unpacked tensor from file A.tns\nA = pt.read( A.tns , format([dense, compressed, compressed]), false)  NOTE: the tensor will be packed anyway before any computation is actually performed.  Currently, taco supports loading from the following matrix and tensor file formats:   Matrix Market (Coordinate) Format (.mtx)  Rutherford-Boeing Format (.rb)  FROSTT Format (.tns)", 
            "title": "Loading Tensors from File"
        }, 
        {
            "location": "/pytensors/index.html#writing-tensors-to-files", 
            "text": "You can also write a (packed) tensor directly to file by calling  pytaco.write , as demonstrated below:  import pytaco as pt\n\nA = pt.tensor([512, 64, 2048], compressed)\nA[0, 1, 0] = 42.0\nA[1, 1, 1] = 77\npt.write( A.tns , A);  # Write tensor A to file A.tns  pytaco.write  supports the same set of matrix and tensor file formats as  pytaco.read .", 
            "title": "Writing Tensors to Files"
        }, 
        {
            "location": "/pytensors/index.html#io-with-numpy-or-scipy", 
            "text": "Tensors can be initialized with either numpy arrays or scipy sparse CSC or CSR matrices. As such, we can use the I/O from numpy and scipy and feed the data into pytaco by initializing a tensor.  import pytaco as pt\nimport numpy as np\nimport scipy.sparse\n\n# Assuming matrix is CSR\nsparse_matrix = scipy.sparse.load_npz('sparse_matrix.npz')\n\n# Pass data into taco for use\ntaco_tensor = pt.from_scipy_csr(sparse_matrix)\n\n# We can also load a numpy array\nnp_array = np.load('arr.npy')\n\n# And initialize a tensor from this array\ndense_tensor = pt.from_numpy_array(np_array)", 
            "title": "I/O with Numpy or Scipy"
        }, 
        {
            "location": "/pycomputations/index.html", 
            "text": "Specifying Tensor Algebra Computations\n\n\nTensor algebra computations can be expressed in TACO using tensor index\nnotation, which at a high level describes how each element in the result tensor\ncan be computed from elements in the operand tensors. As an example, matrix\naddition can be expressed in index notation as \n\n\n\n\nA_{ij} = B_{ij} + C_{ij}\n\n\n\n\nwhere \nA\n, \nB\n, and \nC\n denote two-dimensional tensors (i.e., matrices)\nwhile \ni\n and \nj\n are index variables that represent abstract indices into\nthe corresponding dimensions of the tensors.  In plain English, the example\nabove essentially states that, for every \ni\n and \nj\n, the element in the\n\ni\n-th row and \nj\n-th column of \nA\n should be assigned the sum of the\ncorresponding elements in \nB\n and \nC\n. Similarly, element-wise\nmultiplication of three tensors can be expressed in index notation as \n\n\n\n\nA_{ijk} = B_{ijk} \\cdot C_{ijk} \\cdot D_{ijk}.\n\n\n\n\nTo define the same computation using the TACO Python library, we can write very\nsimilar code, with the main difference being that we also have to explicitly\ndeclare the index variables beforehand:\n\n\ni, j, k = pytaco.index_var(), pytaco.index_var(), pytaco.index_var()\nA[i,j,k] = B[i,j,k] * C[i,j,k] * D[i,j,k]\n\n\n\n\nThis can also be rewritten more compactly as\n\n\ni, j, k = pytaco.get_index_vars(3)\nA[i,j,k] = B[i,j,k] * C[i,j,k] * D[i,j,k]\n\n\n\n\n\n\nWarning\n\n\nIt is important to note that due to the complications that arise from\nassembling sparse structures, we cannot have a tensor appear both on the left\nhand side and the right hand side of an expression.  For all forms of index\nexpressions, we do not support indexing a tensor with the same index variable.\nFor example expressions such as \nA[i,i]\n are disallowed.\n\n\n\n\nNOTE: When using scalars to express computations we must still use the square brackets to index the tensor. Since scalars are order-0 tensors, \nNone\n must be passed into the index to specify that no \nindexVar\ns are used:\n\n\nimport pytaco as pt\ni, j = pt.get_index_vars(2)\n\n# Make a scalar value\nA = pt.tensor(0)\n# Make a compressed tensor of size 3x3\nB = pt.tensor([3,3])\n\n# Make some assignments\nB[0, 0] = 1\nB[1, 0] = 10\n\n# We can sum the elements in B as follows. Notice we need to use None to tell \n# taco that A is a scalar.\nA[None] = B[i, j]\n\n\n\n\nExpressing Reductions\n\n\nIn both of the previous examples, all of the index variables are used to index into both the output and the inputs. However, it is possible for an index variable to be used to index into the inputs only, in which case the index variable is reduced (summed) over. For instance, the following example \n\n\ny(i) = A(i,j) * x(j)\n\n\n\n\ncan be rewritten with the summation more explicit as \ny(i) = \\sum_{j} A(i,j) \\cdot x(j)\n and demonstrates how matrix-vector multiplication can be expressed in index notation.\n\n\nNote that, in taco, reductions are assumed to be over the smallest subexpression that captures all uses of the corresponding reduction variable. For instance, the following computation \n\n\ny(i) = A(i,j) * x(j) + z(i)\n\n\n\n\ncan be rewritten with the summation more explicit as \n\n\n\n\ny(i) = \\big(\\sum_{j} A(i,j) \\cdot x(j)\\big) + z(i),\n\n\n\n\nwhereas the following computation \n\n\ny(i) = A(i,j) * x(j) + z(j)\n\n\n\n\ncan be rewritten with the summation more explicit as \n\n\n\n\ny(i) = \\sum_{j} \\big(A(i,j) \\cdot x(j) + z(i)\\big).\n\n\n\n\nExpressing Broadcasts\n\n\nWhen using \nindexVar\ns, we must ensure that dimensions with the same \nindexVar\n are of the same size. Operations can be broadcast along outer dimensions assuming the inner dimensions are of the same size. For example:\n\n\nimport pytaco as pt\ni, j, k = pt.get_index_vars(3)\n\n# Make a compressed tensor of size 3x3\nA = pt.tensor([3,3])\nB = pt.tensor([3,3])\n\n# Make a dense vector\nC = pt.tensor([3], pt.dense)\n\n# Make some assignments\nC[0] = 1\nB[0, 0] = 1\n\n# We can add C to each row of B as follows:\nA[i, j] =  B[i, j] + C[j]\n\n\n\n\nThe following, however, is not valid since the dimension of index j is of a different size for the different tensors:\n\n\nimport pytaco as pt\ni, j, k = pt.get_index_vars(3)\n\n# Make a compressed tensor of size 3x3\nA = pt.tensor([3,3])\nB = pt.tensor([3,3])\n\n# Make a dense vector\nC = pt.tensor([3,1], pt.dense)\n\n# Make some assignments\nC[1, 0] = 1\nB[0, 0] = 1\n\n# We can add C to each row of B as follows:\nA[i, j] =  B[i, j] + C[i, j]\n\n\n\n\nTaco currently does not support numpy-style broadcasting of singleton dimensions as evidenced by the snippet above. \n\n\nExpressing Transposes\n\n\nTransposes are not allowed during computations. The user will need to explicitly transpose a tensor themselves using \npt.tensor.transpose(new_ordering)\n before doing the computation.\n\n\nPerforming the Computation\n\n\nOnce a tensor algebra computation has been defined (and all of the inputs have been \ninitialized\n), you can simply invoke the output tensor's \nevaluate\n method to perform the actual computation:\n\n\nA.evaluate();  // Perform the computation defined previously for output tensor A\n\n\n\n\nUnder the hood, when you invoke the \nevaluate\n method, taco first invokes the output tensor's \ncompile\n method to generate kernels that assembles the output indices (if the tensor contains any sparse dimensions) and that performs the actual computation. taco would then call the two generated kernels by invoking the output tensor's \nassemble\n and \ncompute\n methods. You can manually invoke these methods instead of calling \nevaluate\n as demonstrated below:\n\n\nA.compile();   // Generate output assembly and compute kernels \nA.assemble();  // Invoke the output assembly kernel to assemble the output indices\nA.compute();   // Invoke the compute kernel to perform the actual computation\n\n\n\n\nThis can be useful if you want to perform the same computation multiple times, in which case it suffices to invoke \ncompile\n once before the first time the computation is performed.\n\n\nIt is also possible to skip using the compiler functions entirely. Once you attempt to modify or view the output tensor, taco will automatically invoke the compiler in order to generate the data.", 
            "title": "Computing on Tensors"
        }, 
        {
            "location": "/pycomputations/index.html#specifying-tensor-algebra-computations", 
            "text": "Tensor algebra computations can be expressed in TACO using tensor index\nnotation, which at a high level describes how each element in the result tensor\ncan be computed from elements in the operand tensors. As an example, matrix\naddition can be expressed in index notation as    A_{ij} = B_{ij} + C_{ij}   where  A ,  B , and  C  denote two-dimensional tensors (i.e., matrices)\nwhile  i  and  j  are index variables that represent abstract indices into\nthe corresponding dimensions of the tensors.  In plain English, the example\nabove essentially states that, for every  i  and  j , the element in the i -th row and  j -th column of  A  should be assigned the sum of the\ncorresponding elements in  B  and  C . Similarly, element-wise\nmultiplication of three tensors can be expressed in index notation as    A_{ijk} = B_{ijk} \\cdot C_{ijk} \\cdot D_{ijk}.   To define the same computation using the TACO Python library, we can write very\nsimilar code, with the main difference being that we also have to explicitly\ndeclare the index variables beforehand:  i, j, k = pytaco.index_var(), pytaco.index_var(), pytaco.index_var()\nA[i,j,k] = B[i,j,k] * C[i,j,k] * D[i,j,k]  This can also be rewritten more compactly as  i, j, k = pytaco.get_index_vars(3)\nA[i,j,k] = B[i,j,k] * C[i,j,k] * D[i,j,k]   Warning  It is important to note that due to the complications that arise from\nassembling sparse structures, we cannot have a tensor appear both on the left\nhand side and the right hand side of an expression.  For all forms of index\nexpressions, we do not support indexing a tensor with the same index variable.\nFor example expressions such as  A[i,i]  are disallowed.   NOTE: When using scalars to express computations we must still use the square brackets to index the tensor. Since scalars are order-0 tensors,  None  must be passed into the index to specify that no  indexVar s are used:  import pytaco as pt\ni, j = pt.get_index_vars(2)\n\n# Make a scalar value\nA = pt.tensor(0)\n# Make a compressed tensor of size 3x3\nB = pt.tensor([3,3])\n\n# Make some assignments\nB[0, 0] = 1\nB[1, 0] = 10\n\n# We can sum the elements in B as follows. Notice we need to use None to tell \n# taco that A is a scalar.\nA[None] = B[i, j]", 
            "title": "Specifying Tensor Algebra Computations"
        }, 
        {
            "location": "/pycomputations/index.html#expressing-reductions", 
            "text": "In both of the previous examples, all of the index variables are used to index into both the output and the inputs. However, it is possible for an index variable to be used to index into the inputs only, in which case the index variable is reduced (summed) over. For instance, the following example   y(i) = A(i,j) * x(j)  can be rewritten with the summation more explicit as  y(i) = \\sum_{j} A(i,j) \\cdot x(j)  and demonstrates how matrix-vector multiplication can be expressed in index notation.  Note that, in taco, reductions are assumed to be over the smallest subexpression that captures all uses of the corresponding reduction variable. For instance, the following computation   y(i) = A(i,j) * x(j) + z(i)  can be rewritten with the summation more explicit as    y(i) = \\big(\\sum_{j} A(i,j) \\cdot x(j)\\big) + z(i),   whereas the following computation   y(i) = A(i,j) * x(j) + z(j)  can be rewritten with the summation more explicit as    y(i) = \\sum_{j} \\big(A(i,j) \\cdot x(j) + z(i)\\big).", 
            "title": "Expressing Reductions"
        }, 
        {
            "location": "/pycomputations/index.html#expressing-broadcasts", 
            "text": "When using  indexVar s, we must ensure that dimensions with the same  indexVar  are of the same size. Operations can be broadcast along outer dimensions assuming the inner dimensions are of the same size. For example:  import pytaco as pt\ni, j, k = pt.get_index_vars(3)\n\n# Make a compressed tensor of size 3x3\nA = pt.tensor([3,3])\nB = pt.tensor([3,3])\n\n# Make a dense vector\nC = pt.tensor([3], pt.dense)\n\n# Make some assignments\nC[0] = 1\nB[0, 0] = 1\n\n# We can add C to each row of B as follows:\nA[i, j] =  B[i, j] + C[j]  The following, however, is not valid since the dimension of index j is of a different size for the different tensors:  import pytaco as pt\ni, j, k = pt.get_index_vars(3)\n\n# Make a compressed tensor of size 3x3\nA = pt.tensor([3,3])\nB = pt.tensor([3,3])\n\n# Make a dense vector\nC = pt.tensor([3,1], pt.dense)\n\n# Make some assignments\nC[1, 0] = 1\nB[0, 0] = 1\n\n# We can add C to each row of B as follows:\nA[i, j] =  B[i, j] + C[i, j]  Taco currently does not support numpy-style broadcasting of singleton dimensions as evidenced by the snippet above.", 
            "title": "Expressing Broadcasts"
        }, 
        {
            "location": "/pycomputations/index.html#expressing-transposes", 
            "text": "Transposes are not allowed during computations. The user will need to explicitly transpose a tensor themselves using  pt.tensor.transpose(new_ordering)  before doing the computation.", 
            "title": "Expressing Transposes"
        }, 
        {
            "location": "/pycomputations/index.html#performing-the-computation", 
            "text": "Once a tensor algebra computation has been defined (and all of the inputs have been  initialized ), you can simply invoke the output tensor's  evaluate  method to perform the actual computation:  A.evaluate();  // Perform the computation defined previously for output tensor A  Under the hood, when you invoke the  evaluate  method, taco first invokes the output tensor's  compile  method to generate kernels that assembles the output indices (if the tensor contains any sparse dimensions) and that performs the actual computation. taco would then call the two generated kernels by invoking the output tensor's  assemble  and  compute  methods. You can manually invoke these methods instead of calling  evaluate  as demonstrated below:  A.compile();   // Generate output assembly and compute kernels \nA.assemble();  // Invoke the output assembly kernel to assemble the output indices\nA.compute();   // Invoke the compute kernel to perform the actual computation  This can be useful if you want to perform the same computation multiple times, in which case it suffices to invoke  compile  once before the first time the computation is performed.  It is also possible to skip using the compiler functions entirely. Once you attempt to modify or view the output tensor, taco will automatically invoke the compiler in order to generate the data.", 
            "title": "Performing the Computation"
        }, 
        {
            "location": "/scientific_computing/index.html", 
            "text": "Sparse matrix-vector multiplication (SpMV) is a bottleneck computation in many\nscientific and engineering computations. Mathematically, SpMV can be expressed\nas \n\n\n\n\ny = Ax + z,\n\n\n\n\nwhere \nA\n is a sparse matrix and \nx\n, \ny\n, and \nz\n\nare dense vectors. The computation can also be expressed in \nindex\nnotation\n as \n\n\n\n\ny_i = A_{ij} \\cdot x_j + z_i.\n\n\n\n\nYou can use the TACO Python library to easily and efficiently compute SpMV, as\nshown here:\n\n\nimport pytaco as pt\nfrom pytaco import compressed, dense\nimport numpy as np\n\n# Define formats for storing the sparse matrix and dense vectors\ncsr = pt.format([dense, compressed])\ndv  = pt.format([dense])\n\n# Load a sparse matrix stored in the matrix market format) and store it \n# as a CSR matrix.  The matrix in this example can be downloaded from:\n# https://www.cise.ufl.edu/research/sparse/MM/Boeing/pwtk.tar.gz\nA = pt.read(\npwtk.mtx\n, csr)\n\n# Generate two random vectors using NumPy and pass them into TACO\nx = pt.from_array(np.random.uniform(size=A.shape[1]))\nz = pt.from_array(np.random.uniform(size=A.shape[0]))\n\n# Declare the result to be a dense vector\ny = pt.tensor([A.shape[0]], dv)\n\n# Declare index vars\ni, j = pt.get_index_vars(2)\n\n# Define the SpMV computation\ny[i] = A[i, j] * x[j] + z[i]\n\n# Perform the SpMV computation and write the result to file\npt.write(\ny.tns\n, y)\n\n\n\n\nWhen you run the above Python program, TACO will generate code under the hood\nthat efficiently performs the computation in one shot.  This lets TACO avoid \nmaterializing the intermediate matrix-vector product, thus reducing the amount \nof memory accesses and speeding up the computation.", 
            "title": "Scientific Computing: SpMV"
        }, 
        {
            "location": "/data_analytics/index.html", 
            "text": "Matricized tensor times Khatri-Rao product (MTTKRP) is a bottleneck operation\nin various algorithms - such as Alternating Least Squares - for computing\nsparse tensor factorizations like the Canonical Polyadic Decomposition.\nMathematically, mode-1 MTTKRP (for three-dimensional tensors) can be expressed \nas \n\n\n\n\nA = B_{(1)} (D \\odot C),\n\n\n\n\nwhere \nA\n, \nC\n, and \nD\n are typically dense matrices, \nB\n is a\nthree-dimensional tensor (matricizied along the first mode), and \n\\odot\n\ndenotes the Khatri-Rao product. This operation can also be expressed in \nindex\nnotation\n as \n\n\n\n\nA_{ij} = B_{ikl} \\cdot D_{lj} \\cdot C_{kj}.\n\n\n\n\nYou can use the TACO Python library to easily and efficiently compute MTTKRP,\nas shown here:\n\n\nimport pytaco as pt\nimport numpy as np\nfrom pytaco import compressed, dense\n\n# Define formats for storing the sparse tensor and dense matrices\ncsf = pt.format([compressed, compressed, compressed])\nrm  = pt.format([dense, dense])\n\n# Load a sparse three-dimensional tensor from file (stored in the FROSTT\n# format) and store it as a compressed sparse fiber tensor. The tensor in this\n# example can be download from: http://frostt.io/tensors/nell-2/\nB = pt.read(\nnell-2.tns\n, csf);\n\n# Generate two random matrices using NumPy and pass them into TACO\nC = pt.from_array(np.random.uniform(size=(B.shape[1], 25)))\nD = pt.from_array(np.random.uniform(size=(B.shape[2], 25)))\n\n# Declare the result to be a dense matrix\nA = pt.tensor([B.shape[0], 25], rm)\n\n# Declare index vars\ni, j, k, l = get_index_vars(4)\n\n# Define the MTTKRP computation\nA[i, j] = B[i, k, l] * D[l, j] * C[k, j]\n\n# Perform the MTTKRP computation and write the result to file\npt.write(\nA.tns\n, A)\n\n\n\n\nWhen you run the above Python program, TACO will generate code under the hood\nthat efficiently performs the computation in one shot.  This lets TACO avoid\nmaterializing the intermediate Khatri-Rao product, thus reducing the amount of\nmemory accesses and speeding up the computation.", 
            "title": "Data Analytics: MTTKRP"
        }, 
        {
            "location": "/machine_learning/index.html", 
            "text": "Sampled dense-dense matrix product (SDDMM) is a bottleneck operation in many\nfactor analysis algorithms used in machine learning, including Alternating\nLeast Squares and Latent Dirichlet Allocation [1]. Mathematically, the\noperation can be expressed as \n\n\n\n\nA = B \\circ CD,\n\n\n\n\nwhere \nA\n and \nB\n are sparse matrices, \nC\n and \nD\n are dense matrices,\nand \n\\circ\n denotes component-wise multiplication. This operation can also be\nexpressed in \nindex\nnotation\n as \n\n\n\n\nA_{ij} = B_{ij} \\cdot C_{ik} \\cdot C_{kj}.\n\n\n\n\nYou can use the TACO Python library to easily and efficiently compute SDDMM, as\nshown here:\n\n\nimport pytaco as pt\nfrom pytaco import dense, compressed\nimport numpy as np\n\n# Define formats that the inputs and output will be stored as.  To define a\n# format, you must specify whether each dimension is dense or sparse and\n# (optionally) the order in which dimensions should be stored. The formats\n# declared below correspond to doubly compressed sparse row (dcsr), row-major\n# dense (rm), and column-major dense (dm).\ndcsr = pt.format([compressed, compressed])\nrm   = pt.format([dense, dense])\ncm   = pt.format([dense, dense], [1, 0])\n\n# The matrix in this example can be download from:\n# https://www.cise.ufl.edu/research/sparse/MM/Williams/webbase-1M.tar.gz\nB = pt.read(\nwebbase-1M.mtx\n, dcsr)\n\n# Generate two random matrices using NumPy and pass them into TACO\nx = pt.from_array(np.random.uniform(size=(B.shape[0], 1000)))\nz = pt.from_array(np.random.uniform(size=(1000, B.shape[1])), out_format=cm)\n\n# Declare the result to be a doubly compressed sparse row matrix\nA = pt.tensor(B.shape, dcsr)\n\n# Declare index vars\ni, j, k = pt.get_index_vars(3)\n\n# Define the SDDMM computation\nA[i, j] = B[i, j] * C[i, k] * D[k, j]\n\n# Perform the SDDMM computation and write the result to file\npt.write(\nA.mtx\n, A)\n\n\n\n\nWhen you run the above Python program, TACO will generate code under the hood\nthat efficiently performs the computation in one shot.  This lets TACO only \ncompute elements of the intermediate dense matrix product that are actually \nneeded to compute the result, thus reducing the asymptotic complexity of the \ncomputation.\n\n\n[1] Huasha Zhao. 2014. High Performance Machine Learning through Codesign and\nRooflining. Ph.D. Dissertation. EECS Department, University of California,\nBerkeley.", 
            "title": "Machine Learning: SDDMM"
        }, 
        {
            "location": "/optimization/index.html", 
            "text": "This section describes various strategies for improving the performace of\napplications that use TACO to perform linear and tensor algebra computations.\n\n\nSelecting the Right Tensor Format\n\n\nTACO supports storing tensors in a wide range of formats, including many\ncommonly used ones like dense arrays, compressed sparse row (CSR), and\ncompressed sparse fiber (CSF).  Using the right formats to store a sparse\ncomputation's operands and result can not only reduce the amount of memory\nneeded to perform the computation but also improve its performance.  In\nparticular, by selecting formats that accurately describe the sparsity and\nstructure of the operands, TACO can generate code under the hood that exploits\nthese properties of the data to avoid redundantly computing with zero elements\nand thus speed up a computation.\n\n\nAs previously \nexplained\n, TACO uses a\nnovel scheme that describes different tensor storage formats by specifying\nwhether each dimension is sparse or dense.  A dense dimension indicates to TACO\nthat most if not all slices of the tensor along that dimension contain at least\none nonzero element.  So if every element in a matrix is nonzero, we can make\nthat explicit by storing the matrix in a format where both dimensions are\ndense, which indicates that every row is nonempty and that every column in each\nrow stores a nonzero element:\n\n\npytaco.format([pytaco.dense, pytaco.dense])  # a.k.a. a dense array\n\n\n\n\nA sparse dimension, on the other hand, indicates to TACO that most slices of\nthe tensor along that dimension contain only zeros.  So if relatively few rows\nof a matrix is nonempty and if relatively few columns in each nonempty row\nstore nonzero elements, we can also make that explicit by storing the matrix in\na format where both dimensions are sparse:\n\n\npytaco.format([pytaco.compressed, pytaco.compressed])  # a.k.a. a DCSR matrix\n\n\n\n\n\n\nTip\n\n\nStoring a tensor dimension as a sparse dimension incurs overhead that is \nproportional to the number of nonempty slices along that dimension, so only \ndo so if most slices are actually empty.  Otherwise, it is more appropriate \nto store the dimension as a dense dimension.\n\n\n\n\nIt is easy to define custom formats for storing tensors with complex\nsparsity structures.  For example, let's say we have a three-dimensional\ntensor \nA_{ijk}\n that has no empty slice along the \nK\n dimension, and let's\nsay that each row in a slice is either entirely empty (i.e., \nA_{ijk} = 0\n\nfor all \nj\n and some fixed \nk\n, \ni\n) or entirely full (i.e., \nA_{ijk}\n\\neq 0\n for all \nj\n and some fixed \nk\n, \ni\n).  Following the same scheme\nas before, we can define a tensor format that stores dimension 2 (i.e., the\n\nK\n dimension) as a dense dimension, stores dimension 0 (i.e., the \nI\n\ndimension) of each slice along dimension 2 as a sparse dimension, and stores\ndimension 1 (i.e., the \nJ\n dimension) of each nonempty row as a dense\ndimension also:\n\n\npytaco.format([pytaco.dense, pytaco.compressed, pytaco.dense], [2, 0, 1])\n\n\n\n\nUsing the format above, we can then efficiently store \nA\n without explicitly \nstoring any zero element.\n\n\nAs a rough rule of thumb, using formats that accurately describe the sparsity\nand structure of the operands lets TACO minimize memory traffic incurred to\nload tensors from memory as well as minimize redundant work done to perform a\ncomputation, which boosts performance.  This is particularly the case when only\none operand is sparse and the computation does not involve adding elements of\nmultiple operands.  \nThis is not a hard and fast rule though.\n  In\nparticular, computing with multiple sparse operands might prevent TACO from \napplying some optimizations like \nparallelization\n \nthat might otherwise be possible if some of those operands were stored in dense \nformats.  Depending on how sparse your data actually is, this may or may not \nnegatively impact performance.\n\n\nThe most reliable way to determine what are the best formats for storing\ntensors in your application is to just try out many different formats and see\nwhat works. Fortunately, as the examples above demonstrate, this is simple to\ndo with TACO.\n\n\nParallelizing Computations\n\n\nBy default, TACO performs all computations using a single thread.  The maximum\nnumber of threads that TACO may use to perform computations can be adjusted by\ncalling the \npytaco.set_num_threads\n function.  The example below, for\ninstance, tells TACO that up to four threads may be used to execute any\nsubsequent computation in parallel if possible:\n\n\npytaco.set_num_threads(4)\n\n\n\n\nIn general, the maximum number of threads for performing computations should\nnot be set greater than the number of available processor cores.  And depending\non the specific computation and characteristics of the data, setting the\nmaximum number of threads to be less than the number of processor cores may\nactually yield better performance.  As the example above demonstrates, TACO \nmakes it easy to try out different numbers of threads and see what works best \nfor your application.\n\n\n\n\nNote\n\n\nSetting the maximum number of available threads to be greater than one does\nnot guarantee that all computations will be executed in parallel.  In\nparticular, TACO will not execute a computation in parallel if \n\n\n\n\nit multiplies two or more sparse operands (e.g. sparse vector\n  multiplication) or adds a sparse operand to any other operand (e.g.,\n  adding two DCSR matrices), unless the outermost dimensions of the sparse\n  operands are stored as dense dimensions (e.g., adding two CSR matrices,\n  which can be parallelized if the result is stored in a dense matrix); \n\n\nthe first dimension it has to iterate over is one that is supposed to\n  reduce over (e.g., multiplying a CSC matrix by a vector, which requires\n  iterating over the column dimension of the matrix before the row\n  dimension even though the column dimension is reduced over); or\n\n\nit stores the result in a sparse tensor format.\n\n\n\n\nIf TACO does not seem to be executing a computation in parallel, using \ndifferent formats to store the operands and result may help.\n\n\n\n\nBy default, when performing computations in parallel, TACO will assign the same\nnumber of coordinates along a particular dimension to be processed by each\nthread.  For instance, when adding two 1000-by-1000 matrices using two threads,\nTACO will have each thread compute exactly 500 rows of the result.  This would \nbe inefficient though if, for instance, all the nonzeros are stored in the\nfirst 500 rows of the operands, since one thread would end up doing all the\nwork while the other thread does nothing.  In cases like this, an alternative\nparallelization strategy can be specified by calling the\n\npytaco.set_parallel_schedule\n function:\n\n\npt.set_parallel_schedule(\ndynamic\n) \n\n\n\n\nIn contrast to the default parallelization strategy, the dynamic strategy will\nhave each thread first compute just one row of the result.  Whenever a thread\nfinishes computing a row, TACO will assign another row for that thread to\ncompute, and this process is repeated until all 1000 rows have been computed.\nIn this way, work is guaranteed to be evenly distributed between the two\nthreads regardless of the sparsity structures of the operands.\n\n\nUsing a dynamic strategy for parallel execution will incur some overhead\nthough, since work is assigned to threads at runtime.  This overhead can be\nreduced by increasing the chunk size, which is the amount of additional work\nthat is assigned to a thread whenever it completes its previously assigned\nwork.  The example below, for instance, tells TACO to assign ten additional\nrows of the result (instead of just one) for a thread to compute whenever it\nhas completed the previous ten rows:\n\n\npt.set_parallel_schedule(\ndynamic\n, 10) \n\n\n\n\nSince dynamic parallelization strategies incur additional overhead, whether or\nnot using them improves the performance of a computation will depend on how\nevenly spread out the nonzero elements in the tensor operands are.  If each\nmatrix contains roughly the same number of nonzeros in every row, for instance,\nthen using a dynamic strategy will likely not more evenly distribute work\nbetween threads.  In that case, the default static schedule would likely yield\nbetter performance.\n\n\nFusing Computations\n\n\nTACO supports efficiently computing complicated tensor algebra expressions\ninvolving many discrete operations in a single shot.  Let's say, for instance,\nthat we would like to (element-wise) add two vectors \nb\n and \nc\n and compute\nthe cosine of each element in the sum.  We can, of course, simply compute the\naddition and the cosine of the sum in separate statements:\n\n\nt[i] = b[i] + c[i]\na[i] = pt.cos(t[i])\n\n\n\n\nThe program above will first invoke TACO to add \nb\n and \nc\n, store the result\ninto a temporary vector \nt\n, and then invoke TACO again to compute the cosine\nof every element in \nt\n.  Performing the computation this way though not only\nrequires additional memory for storing \nt\n but also requires accessing the\nmemory subsystem to first write \nt\n to memory and then load \nt\n back from\nmemory, which is inefficient if the vectors are large and cannot be stored in\ncache.  Instead, we can compute the addition and the cosine of the sum in a \nsingle statement:\n\n\na[i] = pt.cos(b[i] + c[i])\n\n\n\n\nFor the program above, TACO will automatically generate code that, for every\n\ni\n, immediately computes the cosine of \nb[i] + c[i]\n as soon as the sum is\ncomputed.  TACO thus avoids storing the sum of \nb\n and \nc\n in a temporary\nvector, thereby increasing the performance of the computation.\n\n\nFusing computations can improve performance if it does not require intermediate\nresults to be recomputed multiple times, as is the case with the previous\nexample.  Let's say, however, that we would like to multiply a matrix \nB\n by a\nvector \nc\n and then multiply another matrix \nA\n by the result of the first\nmultiplication.  As before, we can express both operations in a single\nstatement:\n\n\ny[i] = A[i,j] * B[j,k] * x[k]\n\n\n\n\nIn this case though, computing both operations in one shot would require that\nthe multiplication of \nB\n and \nx\n be redundantly recomputed for every\n(non-empty) row of \nA\n, thus reducing performance.  By contrast, computing the\ntwo matrix-vector multiplications in separate statement ensures that the result\nof the first matrix-vector multiplication does not have to be redundantly\ncomputed, thereby minimizing the amount of work needed to perform the\ncomputation:\n\n\nt[j] = B[j,k] * c[k]\ny[i] = A[i,j] * t[j]", 
            "title": "Strategies for Optimization"
        }, 
        {
            "location": "/optimization/index.html#selecting-the-right-tensor-format", 
            "text": "TACO supports storing tensors in a wide range of formats, including many\ncommonly used ones like dense arrays, compressed sparse row (CSR), and\ncompressed sparse fiber (CSF).  Using the right formats to store a sparse\ncomputation's operands and result can not only reduce the amount of memory\nneeded to perform the computation but also improve its performance.  In\nparticular, by selecting formats that accurately describe the sparsity and\nstructure of the operands, TACO can generate code under the hood that exploits\nthese properties of the data to avoid redundantly computing with zero elements\nand thus speed up a computation.  As previously  explained , TACO uses a\nnovel scheme that describes different tensor storage formats by specifying\nwhether each dimension is sparse or dense.  A dense dimension indicates to TACO\nthat most if not all slices of the tensor along that dimension contain at least\none nonzero element.  So if every element in a matrix is nonzero, we can make\nthat explicit by storing the matrix in a format where both dimensions are\ndense, which indicates that every row is nonempty and that every column in each\nrow stores a nonzero element:  pytaco.format([pytaco.dense, pytaco.dense])  # a.k.a. a dense array  A sparse dimension, on the other hand, indicates to TACO that most slices of\nthe tensor along that dimension contain only zeros.  So if relatively few rows\nof a matrix is nonempty and if relatively few columns in each nonempty row\nstore nonzero elements, we can also make that explicit by storing the matrix in\na format where both dimensions are sparse:  pytaco.format([pytaco.compressed, pytaco.compressed])  # a.k.a. a DCSR matrix   Tip  Storing a tensor dimension as a sparse dimension incurs overhead that is \nproportional to the number of nonempty slices along that dimension, so only \ndo so if most slices are actually empty.  Otherwise, it is more appropriate \nto store the dimension as a dense dimension.   It is easy to define custom formats for storing tensors with complex\nsparsity structures.  For example, let's say we have a three-dimensional\ntensor  A_{ijk}  that has no empty slice along the  K  dimension, and let's\nsay that each row in a slice is either entirely empty (i.e.,  A_{ijk} = 0 \nfor all  j  and some fixed  k ,  i ) or entirely full (i.e.,  A_{ijk}\n\\neq 0  for all  j  and some fixed  k ,  i ).  Following the same scheme\nas before, we can define a tensor format that stores dimension 2 (i.e., the K  dimension) as a dense dimension, stores dimension 0 (i.e., the  I \ndimension) of each slice along dimension 2 as a sparse dimension, and stores\ndimension 1 (i.e., the  J  dimension) of each nonempty row as a dense\ndimension also:  pytaco.format([pytaco.dense, pytaco.compressed, pytaco.dense], [2, 0, 1])  Using the format above, we can then efficiently store  A  without explicitly \nstoring any zero element.  As a rough rule of thumb, using formats that accurately describe the sparsity\nand structure of the operands lets TACO minimize memory traffic incurred to\nload tensors from memory as well as minimize redundant work done to perform a\ncomputation, which boosts performance.  This is particularly the case when only\none operand is sparse and the computation does not involve adding elements of\nmultiple operands.   This is not a hard and fast rule though.   In\nparticular, computing with multiple sparse operands might prevent TACO from \napplying some optimizations like  parallelization  \nthat might otherwise be possible if some of those operands were stored in dense \nformats.  Depending on how sparse your data actually is, this may or may not \nnegatively impact performance.  The most reliable way to determine what are the best formats for storing\ntensors in your application is to just try out many different formats and see\nwhat works. Fortunately, as the examples above demonstrate, this is simple to\ndo with TACO.", 
            "title": "Selecting the Right Tensor Format"
        }, 
        {
            "location": "/optimization/index.html#parallelizing-computations", 
            "text": "By default, TACO performs all computations using a single thread.  The maximum\nnumber of threads that TACO may use to perform computations can be adjusted by\ncalling the  pytaco.set_num_threads  function.  The example below, for\ninstance, tells TACO that up to four threads may be used to execute any\nsubsequent computation in parallel if possible:  pytaco.set_num_threads(4)  In general, the maximum number of threads for performing computations should\nnot be set greater than the number of available processor cores.  And depending\non the specific computation and characteristics of the data, setting the\nmaximum number of threads to be less than the number of processor cores may\nactually yield better performance.  As the example above demonstrates, TACO \nmakes it easy to try out different numbers of threads and see what works best \nfor your application.   Note  Setting the maximum number of available threads to be greater than one does\nnot guarantee that all computations will be executed in parallel.  In\nparticular, TACO will not execute a computation in parallel if    it multiplies two or more sparse operands (e.g. sparse vector\n  multiplication) or adds a sparse operand to any other operand (e.g.,\n  adding two DCSR matrices), unless the outermost dimensions of the sparse\n  operands are stored as dense dimensions (e.g., adding two CSR matrices,\n  which can be parallelized if the result is stored in a dense matrix);   the first dimension it has to iterate over is one that is supposed to\n  reduce over (e.g., multiplying a CSC matrix by a vector, which requires\n  iterating over the column dimension of the matrix before the row\n  dimension even though the column dimension is reduced over); or  it stores the result in a sparse tensor format.   If TACO does not seem to be executing a computation in parallel, using \ndifferent formats to store the operands and result may help.   By default, when performing computations in parallel, TACO will assign the same\nnumber of coordinates along a particular dimension to be processed by each\nthread.  For instance, when adding two 1000-by-1000 matrices using two threads,\nTACO will have each thread compute exactly 500 rows of the result.  This would \nbe inefficient though if, for instance, all the nonzeros are stored in the\nfirst 500 rows of the operands, since one thread would end up doing all the\nwork while the other thread does nothing.  In cases like this, an alternative\nparallelization strategy can be specified by calling the pytaco.set_parallel_schedule  function:  pt.set_parallel_schedule( dynamic )   In contrast to the default parallelization strategy, the dynamic strategy will\nhave each thread first compute just one row of the result.  Whenever a thread\nfinishes computing a row, TACO will assign another row for that thread to\ncompute, and this process is repeated until all 1000 rows have been computed.\nIn this way, work is guaranteed to be evenly distributed between the two\nthreads regardless of the sparsity structures of the operands.  Using a dynamic strategy for parallel execution will incur some overhead\nthough, since work is assigned to threads at runtime.  This overhead can be\nreduced by increasing the chunk size, which is the amount of additional work\nthat is assigned to a thread whenever it completes its previously assigned\nwork.  The example below, for instance, tells TACO to assign ten additional\nrows of the result (instead of just one) for a thread to compute whenever it\nhas completed the previous ten rows:  pt.set_parallel_schedule( dynamic , 10)   Since dynamic parallelization strategies incur additional overhead, whether or\nnot using them improves the performance of a computation will depend on how\nevenly spread out the nonzero elements in the tensor operands are.  If each\nmatrix contains roughly the same number of nonzeros in every row, for instance,\nthen using a dynamic strategy will likely not more evenly distribute work\nbetween threads.  In that case, the default static schedule would likely yield\nbetter performance.", 
            "title": "Parallelizing Computations"
        }, 
        {
            "location": "/optimization/index.html#fusing-computations", 
            "text": "TACO supports efficiently computing complicated tensor algebra expressions\ninvolving many discrete operations in a single shot.  Let's say, for instance,\nthat we would like to (element-wise) add two vectors  b  and  c  and compute\nthe cosine of each element in the sum.  We can, of course, simply compute the\naddition and the cosine of the sum in separate statements:  t[i] = b[i] + c[i]\na[i] = pt.cos(t[i])  The program above will first invoke TACO to add  b  and  c , store the result\ninto a temporary vector  t , and then invoke TACO again to compute the cosine\nof every element in  t .  Performing the computation this way though not only\nrequires additional memory for storing  t  but also requires accessing the\nmemory subsystem to first write  t  to memory and then load  t  back from\nmemory, which is inefficient if the vectors are large and cannot be stored in\ncache.  Instead, we can compute the addition and the cosine of the sum in a \nsingle statement:  a[i] = pt.cos(b[i] + c[i])  For the program above, TACO will automatically generate code that, for every i , immediately computes the cosine of  b[i] + c[i]  as soon as the sum is\ncomputed.  TACO thus avoids storing the sum of  b  and  c  in a temporary\nvector, thereby increasing the performance of the computation.  Fusing computations can improve performance if it does not require intermediate\nresults to be recomputed multiple times, as is the case with the previous\nexample.  Let's say, however, that we would like to multiply a matrix  B  by a\nvector  c  and then multiply another matrix  A  by the result of the first\nmultiplication.  As before, we can express both operations in a single\nstatement:  y[i] = A[i,j] * B[j,k] * x[k]  In this case though, computing both operations in one shot would require that\nthe multiplication of  B  and  x  be redundantly recomputed for every\n(non-empty) row of  A , thus reducing performance.  By contrast, computing the\ntwo matrix-vector multiplications in separate statement ensures that the result\nof the first matrix-vector multiplication does not have to be redundantly\ncomputed, thereby minimizing the amount of work needed to perform the\ncomputation:  t[j] = B[j,k] * c[k]\ny[i] = A[i,j] * t[j]", 
            "title": "Fusing Computations"
        }, 
        {
            "location": "/benchmarking/index.html", 
            "text": "The performance of Python applications that use TACO can be measured using\nPython's built-in \ntime.perf_counter\n function with minimal changes to the\napplications.  As an example, we can benchmark the performance of the\nscientific computing application shown \nhere\n as\nfollows:\n\n\nimport pytaco as pt\nfrom pytaco import compressed, dense\nimport numpy as np\nimport time\n\ncsr = pt.format([dense, compressed])\ndv  = pt.format([dense])\n\nA = pt.read(\npwtk.mtx\n, csr)\nx = pt.from_array(np.random.uniform(size=A.shape[1]))\nz = pt.from_array(np.random.uniform(size=A.shape[0]))\ny = pt.tensor([A.shape[0]], dv)\n\ni, j = pt.get_index_vars(2)\ny[i] = A[i, j] * x[j] + z[i]\n\n# Tell TACO to generate code to perform the SpMV computation\ny.compile()\n\n# Benchmark the actual SpMV computation\nstart = time.perf_counter()\ny.compute()\nend = time.perf_counter()\n\nprint(\nExecution time: {0} seconds\n.format(end - start))\n\n\n\n\nIn order to accurately measure TACO's computational performance, \nonly the\ntime it takes to actually perform a computation should be measured.  The time\nit takes to generate code under the hood for performing that computation should\nnot be measured\n, since this overhead can be quite variable but can often be\namortized in practice.  By default though, TACO will only generate and compile\ncode it needs for performing a computation immediately before it has to\nactually perform the computation.  As the example above demonstrates, by\nmanually calling the result tensor's \ncompile\n method, we can tell TACO to\ngenerate code needed for performing the computation before benchmarking starts,\nletting us measure only the performance of the computation itself.\n\n\nThe time it takes to construct the initial input tensors should also not be\nmeasured\n, since again this overhead can often be amortized in practice.  By\ndefault, \npytaco.read\n and functions for converting NumPy arrays and SciPy\nmatrices to TACO tensors return fully constructed tensors.  If you add nonzero\nelements to an input tensor by calling \ninsert\n though, then \npack\n must also\nbe explicitly invoked before any benchmarking is done:\n\n\nimport pytaco as pt\nfrom pytaco import compressed, dense\nimport numpy as np\nimport random\nimport time\n\ncsr = pt.format([dense, compressed])\ndv  = pt.format([dense])\n\nA = pt.read(\npwtk.mtx\n, csr)\nx = pt.tensor([A.shape[1]], dv)\nz = pt.tensor([A.shape[0]], dv)\ny = pt.tensor([A.shape[0]], dv)\n\n# Insert random values into x and z and pack them into dense arrays\nfor k in range(A.shape[1]):\n  x.insert([k], random.random())\nx.pack()\nfor k in range(A.shape[0]):\n  z.insert([k], random.random())\nz.pack()\n\ni, j = pt.get_index_vars(2)\ny[i] = A[i, j] * x[j] + z[i]\n\ny.compile()\n\nstart = time.perf_counter()\ny.compute()\nend = time.perf_counter()\n\nprint(\nExecution time: {0} seconds\n.format(end - start))\n\n\n\n\nTACO avoids regenerating code for performing the same computation though as\nlong as the computation is redefined with the same index variables and with the\nsame operand and result tensors.  Thus, if your application executes the same\ncomputation many times in a loop and if the computation is executed on\nsufficiently large data sets, TACO will naturally amortize the overhead\nassociated with generating code for performing the computation.  In such \nscenarios, it is acceptable to include the initial code generation overhead \nin the performance measurement:\n\n\nimport pytaco as pt\nfrom pytaco import compressed, dense\nimport numpy as np\nimport time\n\ncsr = pt.format([dense, compressed])\ndv  = pt.format([dense])\n\nA = pt.read(\npwtk.mtx\n, csr)\nx = pt.tensor([A.shape[1]], dv)\nz = pt.tensor([A.shape[0]], dv)\ny = pt.tensor([A.shape[0]], dv)\n\nfor k in range(A.shape[1]):\n  x.insert([k], random.random())\nx.pack()\nfor k in range(A.shape[0]):\n  z.insert([k], random.random())\nz.pack()\n\ni, j = pt.get_index_vars(2)\n\n# Benchmark the iterative SpMV computation, including overhead for \n# generating code in the first iteration to perform the computation\nstart = time.perf_counter()\nfor k in range(1000):\n  y[i] = A[i, j] * x[j] + z[i]\n  y.evaluate()\n  x[i] = y[i]\n  x.evaluate()\nend = time.perf_counter()\n\nprint(\nExecution time: {0} seconds\n.format(end - start))\n\n\n\n\n\n\nWarning\n\n\nIn order to avoid regenerating code for performing a computation, the\ncomputation must be redefined with the exact same index variable \nobjects\n\nand also with the exact same tensor objects for operands and result.  In\nthe example above, every loop iteration redefines the computation of \ny\n\nand \nx\n using the same tensor and index variable objects costructed outside\nthe loop, so TACO will only generate code to compute \ny\n and \nx\n in the\nfirst iteration.  If the index variables were constructed inside the loop\nthough, TACO would regenerate code to compute \ny\n and \nx\n in every loop\niteration, and the compilation overhead would not be amortized. \n\n\n\n\n\n\nNote\n\n\nAs a rough rule of thumb, if a computation takes on the order of seconds or\nmore in total to perform across all invocations with identical operands and\nresult (and is always redefined with identical index variables), then it is\nacceptable to include the overhead associated with generating code for\nperforming the computation in performance measurements.", 
            "title": "Guide to Benchmarking"
        }, 
        {
            "location": "/tensors/index.html", 
            "text": "Declaring Tensors\n\n\ntaco::Tensor\n objects, which correspond to mathematical tensors, form the core of the taco C++ library. You can declare a new tensor by specifying its name, a vector containing the size of each dimension of the tensor, and the \nstorage format\n that will be used to store the tensor:\n\n\n// Declare a new tensor \nA\n of double-precision floats with dimensions \n// 512 x 64 x 2048, stored as a dense-sparse-sparse tensor\nTensor\ndouble\n A(\nA\n, {512,64,2048}, Format({Dense,Sparse,Sparse}));\n\n\n\n\nThe name of the tensor can be omitted, in which case taco will assign an arbitrary name to the tensor:\n\n\n// Declare another tensor with the same dimensions and storage format as before\nTensor\ndouble\n A({512,64,2048}, Format({Dense,Sparse,Sparse}));\n\n\n\n\nScalars, which are treated as order-0 tensors, can be declared and initialized with some arbitrary value as demonstrated below:\n\n\nTensor\ndouble\n alpha(42.0);  // Declare a scalar tensor initialized to 42.0\n\n\n\n\nDefining Tensor Formats\n\n\nConceptually, you can think of a tensor as a tree with each level (excluding the root) corresponding to a dimension of the tensor. Each path from the root to a leaf node represents a tensor coordinate and its corresponding value. Which dimension each level of the tree corresponds to is determined by the order in which dimensions of the tensor are stored.\n\n\ntaco uses a novel scheme that can describe different storage formats for any tensor by specifying the order in which tensor dimensions are stored and whether each dimension is sparse or dense. A sparse dimension stores only the subset of the dimension that contains non-zero values and is conceptually similar to the index arrays used in the compressed sparse row (CSR) matrix format, while a dense dimension stores both zeros and non-zeros. As demonstrated below, this scheme is flexibile enough to express many commonly-used matrix storage formats.\n\n\nYou can define a new tensor storage format by creating a \ntaco::Format\n object. The constructor for \ntaco::Format\n takes as arguments a vector specifying the type of each dimension and (optionally) a vector specifying the order in which dimensions are to be stored, following the above scheme:\n\n\nFormat   dm({Dense,Dense});           // (Row-major) dense matrix\nFormat  csr({Dense,Sparse});          // Compressed sparse row matrix\nFormat  csc({Dense,Sparse}, {1,0});   // Compressed sparse column matrix\nFormat dcsr({Sparse,Sparse}, {1,0});  // Doubly compressed sparse column matrix\n\n\n\n\nAlternatively, you can define a tensor format that contains only sparse or dense dimensions as follows:\n\n\nFormat csf(Sparse);  // Compressed sparse fiber tensor\n\n\n\n\nInitializing Tensors\n\n\nYou can initialize a \ntaco::Tensor\n by calling the \ninsert\n method to add a non-zero component to the tensor. The \ninsert\n method takes two arguments, a vector specifying the coordinate of the non-zero component to be added and the value to be inserted at that coordinate:\n\n\nA.insert({128,32,1024}, 42.0);  // A(128,32,1024) = 42.0\n\n\n\n\nThe \ninsert\n method adds the inserted non-zeros to a temporary buffer. Before a tensor can actually be used in a computation though, you must invoke the \npack\n method to compress the tensor into the storage format that was specified when the tensor was first declared:\n\n\nA.pack();  // Construct dense-sparse-sparse tensor containing inserted non-zeros\n\n\n\n\nLoading Tensors from File\n\n\nRather than manually invoking \ninsert\n and \npack\n to initialize a tensor, you can load tensors directly from file by calling \ntaco::read\n as demonstrated below:\n\n\n// Load a dense-sparse-sparse tensor from file A.tns\nA = read(\nA.tns\n, Format({Dense, Sparse, Sparse}));\n\n\n\n\nBy default, \ntaco::read\n returns a packed tensor. You can optionally pass a Boolean flag as an argument to indicate whether the returned tensor should be packed or not:\n\n\n// Load an unpacked tensor from file A.tns\nA = read(\nA.tns\n, Format({Dense, Sparse, Sparse}), false);\n\n\n\n\nCurrently, taco supports loading from the following matrix and tensor file formats:\n\n\n\n\nMatrix Market (Coordinate) Format (.mtx)\n\n\nRutherford-Boeing Format (.rb)\n\n\nFROSTT Format (.tns)\n\n\n\n\nWriting Tensors to File\n\n\nYou can also write a (packed) tensor directly to file by calling \ntaco::write\n, as demonstrated below:\n\n\nwrite(\nA.tns\n, A);  // Write tensor A to file A.tns\n\n\n\n\ntaco::write\n supports the same set of matrix and tensor file formats as \ntaco::read\n.", 
            "title": "Defining Tensors"
        }, 
        {
            "location": "/tensors/index.html#declaring-tensors", 
            "text": "taco::Tensor  objects, which correspond to mathematical tensors, form the core of the taco C++ library. You can declare a new tensor by specifying its name, a vector containing the size of each dimension of the tensor, and the  storage format  that will be used to store the tensor:  // Declare a new tensor  A  of double-precision floats with dimensions \n// 512 x 64 x 2048, stored as a dense-sparse-sparse tensor\nTensor double  A( A , {512,64,2048}, Format({Dense,Sparse,Sparse}));  The name of the tensor can be omitted, in which case taco will assign an arbitrary name to the tensor:  // Declare another tensor with the same dimensions and storage format as before\nTensor double  A({512,64,2048}, Format({Dense,Sparse,Sparse}));  Scalars, which are treated as order-0 tensors, can be declared and initialized with some arbitrary value as demonstrated below:  Tensor double  alpha(42.0);  // Declare a scalar tensor initialized to 42.0", 
            "title": "Declaring Tensors"
        }, 
        {
            "location": "/tensors/index.html#defining-tensor-formats", 
            "text": "Conceptually, you can think of a tensor as a tree with each level (excluding the root) corresponding to a dimension of the tensor. Each path from the root to a leaf node represents a tensor coordinate and its corresponding value. Which dimension each level of the tree corresponds to is determined by the order in which dimensions of the tensor are stored.  taco uses a novel scheme that can describe different storage formats for any tensor by specifying the order in which tensor dimensions are stored and whether each dimension is sparse or dense. A sparse dimension stores only the subset of the dimension that contains non-zero values and is conceptually similar to the index arrays used in the compressed sparse row (CSR) matrix format, while a dense dimension stores both zeros and non-zeros. As demonstrated below, this scheme is flexibile enough to express many commonly-used matrix storage formats.  You can define a new tensor storage format by creating a  taco::Format  object. The constructor for  taco::Format  takes as arguments a vector specifying the type of each dimension and (optionally) a vector specifying the order in which dimensions are to be stored, following the above scheme:  Format   dm({Dense,Dense});           // (Row-major) dense matrix\nFormat  csr({Dense,Sparse});          // Compressed sparse row matrix\nFormat  csc({Dense,Sparse}, {1,0});   // Compressed sparse column matrix\nFormat dcsr({Sparse,Sparse}, {1,0});  // Doubly compressed sparse column matrix  Alternatively, you can define a tensor format that contains only sparse or dense dimensions as follows:  Format csf(Sparse);  // Compressed sparse fiber tensor", 
            "title": "Defining Tensor Formats"
        }, 
        {
            "location": "/tensors/index.html#initializing-tensors", 
            "text": "You can initialize a  taco::Tensor  by calling the  insert  method to add a non-zero component to the tensor. The  insert  method takes two arguments, a vector specifying the coordinate of the non-zero component to be added and the value to be inserted at that coordinate:  A.insert({128,32,1024}, 42.0);  // A(128,32,1024) = 42.0  The  insert  method adds the inserted non-zeros to a temporary buffer. Before a tensor can actually be used in a computation though, you must invoke the  pack  method to compress the tensor into the storage format that was specified when the tensor was first declared:  A.pack();  // Construct dense-sparse-sparse tensor containing inserted non-zeros", 
            "title": "Initializing Tensors"
        }, 
        {
            "location": "/tensors/index.html#loading-tensors-from-file", 
            "text": "Rather than manually invoking  insert  and  pack  to initialize a tensor, you can load tensors directly from file by calling  taco::read  as demonstrated below:  // Load a dense-sparse-sparse tensor from file A.tns\nA = read( A.tns , Format({Dense, Sparse, Sparse}));  By default,  taco::read  returns a packed tensor. You can optionally pass a Boolean flag as an argument to indicate whether the returned tensor should be packed or not:  // Load an unpacked tensor from file A.tns\nA = read( A.tns , Format({Dense, Sparse, Sparse}), false);  Currently, taco supports loading from the following matrix and tensor file formats:   Matrix Market (Coordinate) Format (.mtx)  Rutherford-Boeing Format (.rb)  FROSTT Format (.tns)", 
            "title": "Loading Tensors from File"
        }, 
        {
            "location": "/tensors/index.html#writing-tensors-to-file", 
            "text": "You can also write a (packed) tensor directly to file by calling  taco::write , as demonstrated below:  write( A.tns , A);  // Write tensor A to file A.tns  taco::write  supports the same set of matrix and tensor file formats as  taco::read .", 
            "title": "Writing Tensors to File"
        }, 
        {
            "location": "/computations/index.html", 
            "text": "Specifying Tensor Algebra Computations\n\n\nTensor algebra computations can be expressed in taco with tensor index notation, which at a high level describes how each element in the output tensor can be computed from elements in the input tensors. As an example, matrix addition can be expressed in index notation as \n\n\nA(i,j) = B(i,j) + C(i,j)\n\n\n\n\nwhere \nA\n, \nB\n, and \nC\n denote order-2 tensors (i.e. matrices) while \ni\n and \nj\n are index variables that represent abstract indices into the corresponding dimensions of the tensors. In words, the example above essentially states that, for every \ni\n and \nj\n, the element in the \ni\n-th row and \nj\n-th column of the \nA\n should be assigned the sum of the corresponding elements in \nB\n and \nC\n. Similarly, element-wise multiplication of three order-3 tensors can be expressed in index notation as follows\n\n\nA(i,j,k) = B(i,j,k) * C(i,j,k) * D(i,j,k)\n\n\n\n\nThe syntax shown above corresponds to exactly what you would have to write in C++ with the taco library to define tensor algebra computations. Note, however, that prior to defining a tensor algebra computation, all index variables have to be declared. This can be done as shown below:\n\n\nIndexVar i, j, k;  // Declare index variables for previous example\n\n\n\n\nExpressing Reductions\n\n\nIn both of the previous examples, all of the index variables are used to index into both the output and the inputs. However, it is possible for an index variable to be used to index into the inputs only, in which case the index variable is reduced (summed) over. For instance, the following example \n\n\ny(i) = A(i,j) * x(j)\n\n\n\n\ncan be rewritten with the summation more explicit as \ny(i) = \\sum_{j} A(i,j) \\cdot x(j)\n and demonstrates how matrix-vector multiplication can be expressed in index notation.\n\n\nNote that, in taco, reductions are assumed to be over the smallest subexpression that captures all uses of the corresponding reduction variable. For instance, the following computation \n\n\ny(i) = A(i,j) * x(j) + z(i)\n\n\n\n\ncan be rewritten with the summation more explicit as \n\n\n\n\ny(i) = \\big(\\sum_{j} A(i,j) \\cdot x(j)\\big) + z(i),\n\n\n\n\nwhereas the following computation \n\n\ny(i) = A(i,j) * x(j) + z(j)\n\n\n\n\ncan be rewritten with the summation more explicit as \n\n\n\n\ny(i) = \\sum_{j} \\big(A(i,j) \\cdot x(j) + z(i)\\big).\n\n\n\n\nPerforming the Computation\n\n\nOnce a tensor algebra computation has been defined (and all of the inputs have been \ninitialized\n), you can simply invoke the output tensor's \nevaluate\n method to perform the actual computation:\n\n\nA.evaluate();  // Perform the computation defined previously for output tensor A\n\n\n\n\nUnder the hood, when you invoke the \nevaluate\n method, taco first invokes the output tensor's \ncompile\n method to generate kernels that assembles the output indices (if the tensor contains any sparse dimensions) and that performs the actual computation. taco would then call the two generated kernels by invoking the output tensor's \nassemble\n and \ncompute\n methods. You can manually invoke these methods instead of calling \nevaluate\n as demonstrated below:\n\n\nA.compile();   // Generate output assembly and compute kernels \nA.assemble();  // Invoke the output assembly kernel to assemble the output indices\nA.compute();   // Invoke the compute kernel to perform the actual computation\n\n\n\n\nThis can be useful if you want to perform the same computation multiple times, in which case it suffices to invoke \ncompile\n once before the first time the computation is performed.\n\n\nDelayed Execuation\n\n\nIt is also possible to skip using the compiler functions entirely. Once you attempt to modify or view the output tensor, taco will automatically invoke the compiler in order to generate the data. \n\n\nIt should be noted that in order to accurately time a computation, it is necessary to invoke the compiler functions directly since relying on the delayed execution mechanism can cause a lot of prior computations to be included in the timing.", 
            "title": "Computing on Tensors"
        }, 
        {
            "location": "/computations/index.html#specifying-tensor-algebra-computations", 
            "text": "Tensor algebra computations can be expressed in taco with tensor index notation, which at a high level describes how each element in the output tensor can be computed from elements in the input tensors. As an example, matrix addition can be expressed in index notation as   A(i,j) = B(i,j) + C(i,j)  where  A ,  B , and  C  denote order-2 tensors (i.e. matrices) while  i  and  j  are index variables that represent abstract indices into the corresponding dimensions of the tensors. In words, the example above essentially states that, for every  i  and  j , the element in the  i -th row and  j -th column of the  A  should be assigned the sum of the corresponding elements in  B  and  C . Similarly, element-wise multiplication of three order-3 tensors can be expressed in index notation as follows  A(i,j,k) = B(i,j,k) * C(i,j,k) * D(i,j,k)  The syntax shown above corresponds to exactly what you would have to write in C++ with the taco library to define tensor algebra computations. Note, however, that prior to defining a tensor algebra computation, all index variables have to be declared. This can be done as shown below:  IndexVar i, j, k;  // Declare index variables for previous example", 
            "title": "Specifying Tensor Algebra Computations"
        }, 
        {
            "location": "/computations/index.html#expressing-reductions", 
            "text": "In both of the previous examples, all of the index variables are used to index into both the output and the inputs. However, it is possible for an index variable to be used to index into the inputs only, in which case the index variable is reduced (summed) over. For instance, the following example   y(i) = A(i,j) * x(j)  can be rewritten with the summation more explicit as  y(i) = \\sum_{j} A(i,j) \\cdot x(j)  and demonstrates how matrix-vector multiplication can be expressed in index notation.  Note that, in taco, reductions are assumed to be over the smallest subexpression that captures all uses of the corresponding reduction variable. For instance, the following computation   y(i) = A(i,j) * x(j) + z(i)  can be rewritten with the summation more explicit as    y(i) = \\big(\\sum_{j} A(i,j) \\cdot x(j)\\big) + z(i),   whereas the following computation   y(i) = A(i,j) * x(j) + z(j)  can be rewritten with the summation more explicit as    y(i) = \\sum_{j} \\big(A(i,j) \\cdot x(j) + z(i)\\big).", 
            "title": "Expressing Reductions"
        }, 
        {
            "location": "/computations/index.html#performing-the-computation", 
            "text": "Once a tensor algebra computation has been defined (and all of the inputs have been  initialized ), you can simply invoke the output tensor's  evaluate  method to perform the actual computation:  A.evaluate();  // Perform the computation defined previously for output tensor A  Under the hood, when you invoke the  evaluate  method, taco first invokes the output tensor's  compile  method to generate kernels that assembles the output indices (if the tensor contains any sparse dimensions) and that performs the actual computation. taco would then call the two generated kernels by invoking the output tensor's  assemble  and  compute  methods. You can manually invoke these methods instead of calling  evaluate  as demonstrated below:  A.compile();   // Generate output assembly and compute kernels \nA.assemble();  // Invoke the output assembly kernel to assemble the output indices\nA.compute();   // Invoke the compute kernel to perform the actual computation  This can be useful if you want to perform the same computation multiple times, in which case it suffices to invoke  compile  once before the first time the computation is performed.", 
            "title": "Performing the Computation"
        }, 
        {
            "location": "/computations/index.html#delayed-execuation", 
            "text": "It is also possible to skip using the compiler functions entirely. Once you attempt to modify or view the output tensor, taco will automatically invoke the compiler in order to generate the data.   It should be noted that in order to accurately time a computation, it is necessary to invoke the compiler functions directly since relying on the delayed execution mechanism can cause a lot of prior computations to be included in the timing.", 
            "title": "Delayed Execuation"
        }
    ]
}