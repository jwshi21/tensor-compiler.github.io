{
    "docs": [
        {
            "location": "/",
            "text": "taco\n is a library for compiling dense and sparse linear and tensor algebra expressions. The expressions can range from simple kernels like SpMV to more complex kernels like MTTKRP, where the operands can be dense, sparse, or a mix of dense and sparse. taco automatically generates efficient compute kernels (loops) to evaluate these expressions.\n\n\nThe sidebar to the left links to documentation for the taco C++ library as well as some examples demonstrating how taco can be used in real-world applications.\n\n\nSystem Requirements\n\n\n\n\nA C compiler that supports C99 and OpenMP (if parallelism is desired), such as GCC or Clang\n\n\n\n\nGetting Help\n\n\nQuestions and bug reports can be submitted \nhere\n.",
            "title": "Home"
        },
        {
            "location": "/#system-requirements",
            "text": "A C compiler that supports C99 and OpenMP (if parallelism is desired), such as GCC or Clang",
            "title": "System Requirements"
        },
        {
            "location": "/#getting-help",
            "text": "Questions and bug reports can be submitted  here .",
            "title": "Getting Help"
        },
        {
            "location": "/tensors/",
            "text": "Declaring Tensors\n\n\ntaco::Tensor\n objects, which correspond to mathematical tensors, form the core of the taco C++ library. You can declare a new tensor by specifying its name, a vector containing the size of each dimension of the tensor, and the \nstorage format\n that will be used to store the tensor:\n\n\n// Declare a new tensor \"A\" of double-precision floats with dimensions \n// 512 x 64 x 2048, stored as a dense-sparse-sparse tensor\nTensor<double> A(\"A\", {512,64,2048}, Format({Dense,Sparse,Sparse}));\n\n\n\n\nThe name of the tensor can be omitted, in which case taco will assign an arbitrary name to the tensor:\n\n\n// Declare another tensor with the same dimensions and storage format as before\nTensor<double> A({512,64,2048}, Format({Dense,Sparse,Sparse}));\n\n\n\n\nScalars, which are treated as order-0 tensors, can be declared and initialized with some arbitrary value as demonstrated below:\n\n\nTensor<double> alpha(42.0);  // Declare a scalar tensor initialized to 42.0\n\n\n\n\nDefining Tensor Formats\n\n\nConceptually, you can think of a tensor as a tree with each level (excluding the root) corresponding to a dimension of the tensor. Each path from the root to a leaf node represents a tensor coordinate and its corresponding value. Which dimension each level of the tree corresponds to is determined by the order in which dimensions of the tensor are stored.\n\n\ntaco uses a novel scheme that can describe different storage formats for any tensor by specifying the order in which tensor dimensions are stored and whether each dimension is sparse or dense. A sparse dimension stores only the subset of the dimension that contains non-zero values and is conceptually similar to the index arrays used in the compressed sparse row (CSR) matrix format, while a dense dimension stores both zeros and non-zeros. As demonstrated below, this scheme is flexibile enough to express many commonly-used matrix storage formats.\n\n\nYou can define a new tensor storage format by creating a \ntaco::Format\n object. The constructor for \ntaco::Format\n takes as arguments a vector specifying the type of each dimension and (optionally) a vector specifying the order in which dimensions are to be stored, following the above scheme:\n\n\nFormat   dm({Dense,Dense});           // (Row-major) dense matrix\nFormat  csr({Dense,Sparse});          // Compressed sparse row matrix\nFormat  csc({Dense,Sparse}, {1,0});   // Compressed sparse column matrix\nFormat dcsr({Sparse,Sparse}, {1,0});  // Doubly compressed sparse column matrix\n\n\n\n\nAlternatively, you can define a tensor format that contains only sparse or dense dimensions as follows:\n\n\nFormat csf(Sparse);  // Compressed sparse fiber tensor\n\n\n\n\nInitializing Tensors\n\n\nYou can initialize a \ntaco::Tensor\n by calling the \ninsert\n method to add a non-zero component to the tensor. The \ninsert\n method takes two arguments, a vector specifying the coordinate of the non-zero component to be added and the value to be inserted at that coordinate:\n\n\nA.insert({128,32,1024}, 42.0);  // A(128,32,1024) = 42.0\n\n\n\n\nThe \ninsert\n method adds the inserted non-zeros to a temporary buffer. Before a tensor can actually be used in a computation though, you must invoke the \npack\n method to compress the tensor into the storage format that was specified when the tensor was first declared:\n\n\nA.pack();  // Construct dense-sparse-sparse tensor containing inserted non-zeros\n\n\n\n\nLoading Tensors from File\n\n\nRather than manually invoking \ninsert\n and \npack\n to initialize a tensor, you can load tensors directly from file by calling \ntaco::read\n as demonstrated below:\n\n\n// Load a dense-sparse-sparse tensor from file A.tns\nA = read(\"A.tns\", Format({Dense, Sparse, Sparse}));\n\n\n\n\nBy default, \ntaco::read\n returns a packed tensor. You can optionally pass a Boolean flag as an argument to indicate whether the returned tensor should be packed or not:\n\n\n// Load an unpacked tensor from file A.tns\nA = read(\"A.tns\", Format({Dense, Sparse, Sparse}), false);\n\n\n\n\nCurrently, taco supports loading from the following matrix and tensor file formats:\n\n\n\n\nMatrix Market (Coordinate) Format (.mtx)\n\n\nHarwell-Boeing Format (.hb)\n\n\nFROSTT Format (.tns)\n\n\n\n\nWriting Tensors to File\n\n\nYou can also write a (packed) tensor directly to file by calling \ntaco::write\n, as demonstrated below:\n\n\nwrite(\"A.tns\", A);  // Write tensor A to file A.tns\n\n\n\n\ntaco::write\n supports the same set of matrix and tensor file formats as \ntaco::read\n.",
            "title": "Defining Tensors"
        },
        {
            "location": "/tensors/#declaring-tensors",
            "text": "taco::Tensor  objects, which correspond to mathematical tensors, form the core of the taco C++ library. You can declare a new tensor by specifying its name, a vector containing the size of each dimension of the tensor, and the  storage format  that will be used to store the tensor:  // Declare a new tensor \"A\" of double-precision floats with dimensions \n// 512 x 64 x 2048, stored as a dense-sparse-sparse tensor\nTensor<double> A(\"A\", {512,64,2048}, Format({Dense,Sparse,Sparse}));  The name of the tensor can be omitted, in which case taco will assign an arbitrary name to the tensor:  // Declare another tensor with the same dimensions and storage format as before\nTensor<double> A({512,64,2048}, Format({Dense,Sparse,Sparse}));  Scalars, which are treated as order-0 tensors, can be declared and initialized with some arbitrary value as demonstrated below:  Tensor<double> alpha(42.0);  // Declare a scalar tensor initialized to 42.0",
            "title": "Declaring Tensors"
        },
        {
            "location": "/tensors/#defining-tensor-formats",
            "text": "Conceptually, you can think of a tensor as a tree with each level (excluding the root) corresponding to a dimension of the tensor. Each path from the root to a leaf node represents a tensor coordinate and its corresponding value. Which dimension each level of the tree corresponds to is determined by the order in which dimensions of the tensor are stored.  taco uses a novel scheme that can describe different storage formats for any tensor by specifying the order in which tensor dimensions are stored and whether each dimension is sparse or dense. A sparse dimension stores only the subset of the dimension that contains non-zero values and is conceptually similar to the index arrays used in the compressed sparse row (CSR) matrix format, while a dense dimension stores both zeros and non-zeros. As demonstrated below, this scheme is flexibile enough to express many commonly-used matrix storage formats.  You can define a new tensor storage format by creating a  taco::Format  object. The constructor for  taco::Format  takes as arguments a vector specifying the type of each dimension and (optionally) a vector specifying the order in which dimensions are to be stored, following the above scheme:  Format   dm({Dense,Dense});           // (Row-major) dense matrix\nFormat  csr({Dense,Sparse});          // Compressed sparse row matrix\nFormat  csc({Dense,Sparse}, {1,0});   // Compressed sparse column matrix\nFormat dcsr({Sparse,Sparse}, {1,0});  // Doubly compressed sparse column matrix  Alternatively, you can define a tensor format that contains only sparse or dense dimensions as follows:  Format csf(Sparse);  // Compressed sparse fiber tensor",
            "title": "Defining Tensor Formats"
        },
        {
            "location": "/tensors/#initializing-tensors",
            "text": "You can initialize a  taco::Tensor  by calling the  insert  method to add a non-zero component to the tensor. The  insert  method takes two arguments, a vector specifying the coordinate of the non-zero component to be added and the value to be inserted at that coordinate:  A.insert({128,32,1024}, 42.0);  // A(128,32,1024) = 42.0  The  insert  method adds the inserted non-zeros to a temporary buffer. Before a tensor can actually be used in a computation though, you must invoke the  pack  method to compress the tensor into the storage format that was specified when the tensor was first declared:  A.pack();  // Construct dense-sparse-sparse tensor containing inserted non-zeros",
            "title": "Initializing Tensors"
        },
        {
            "location": "/tensors/#loading-tensors-from-file",
            "text": "Rather than manually invoking  insert  and  pack  to initialize a tensor, you can load tensors directly from file by calling  taco::read  as demonstrated below:  // Load a dense-sparse-sparse tensor from file A.tns\nA = read(\"A.tns\", Format({Dense, Sparse, Sparse}));  By default,  taco::read  returns a packed tensor. You can optionally pass a Boolean flag as an argument to indicate whether the returned tensor should be packed or not:  // Load an unpacked tensor from file A.tns\nA = read(\"A.tns\", Format({Dense, Sparse, Sparse}), false);  Currently, taco supports loading from the following matrix and tensor file formats:   Matrix Market (Coordinate) Format (.mtx)  Harwell-Boeing Format (.hb)  FROSTT Format (.tns)",
            "title": "Loading Tensors from File"
        },
        {
            "location": "/tensors/#writing-tensors-to-file",
            "text": "You can also write a (packed) tensor directly to file by calling  taco::write , as demonstrated below:  write(\"A.tns\", A);  // Write tensor A to file A.tns  taco::write  supports the same set of matrix and tensor file formats as  taco::read .",
            "title": "Writing Tensors to File"
        },
        {
            "location": "/computations/",
            "text": "Specifying Tensor Algebra Computations\n\n\nTensor algebra computations can be expressed in taco with tensor index notation, which on a high level describes how each element in the output tensor can be computed from elements in the input tensors. As an example, matrix addition can be expressed in index notation as \n\n\nA(i,j) = B(i,j) + C(i,j)\n\n\n\n\nwhere \nA\n, \nB\n, and \nC\n denote order-2 tensors (i.e. matrices) while \ni\n and \nj\n are index variables that represent abstract indices into the corresponding dimensions of the tensors. In words, the example above essentially states that, for every \ni\n and \nj\n, the element in the \ni\n-th row and \nj\n-th column of the \nA\n should be assigned the sum of the corresponding elements in \nB\n and \nC\n. Similarly, element-wise multiplication of three order-3 tensors can be expressed in index notation as follows\n\n\nA(i,j,k) = B(i,j,k) * C(i,j,k) * D(i,j,k)\n\n\n\n\nThe syntax shown above corresponds to exactly what you would have to write in C++ with the taco library to define tensor algebra computations. Note, however, that prior to defining a tensor algebra computation, all index variables have to be declared. This can be done as shown below:\n\n\nIndexVar i, j, k;  // Declare index variables for previous example\n\n\n\n\nExpressing Reductions\n\n\nIn both of the previous examples, all of the index variables are used to index into both the output and the inputs. However, it is possible for an index variable to be used to index into the inputs only, in which case the index variable is reduced (summed) over. For instance, the following example \n\n\ny(i) = A(i,j) * x(j)\n\n\n\n\ncan be rewritten with the summation more explicit as \ny(i) = \\sum_{j} A(i,j) \\cdot x(j)\n and demonstrates how matrix-vector multiplication can be expressed in index notation.\n\n\nNote that, in taco, reductions are assumed to be over the smallest subexpression that captures all uses of the corresponding reduction variable. For instance, the following computation \n\n\ny(i) = A(i,j) * x(j) + z(i)\n\n\n\n\ncan be rewritten with the summation more explicit as \n\n\n\n\ny(i) = \\big(\\sum_{j} A(i,j) \\cdot x(j)\\big) + z(i),\n\n\n\n\nwhereas the following computation \n\n\ny(i) = A(i,j) * x(j) + z(j)\n\n\n\n\ncan be rewritten with the summation more explicit as \n\n\n\n\ny(i) = \\sum_{j} \\big(A(i,j) \\cdot x(j) + z(i)\\big).\n\n\n\n\nPerforming the Computation\n\n\nOnce a tensor algebra computation has been defined (and all of the inputs have been \ninitialized\n), you can simply invoke the output tensor's \nevaluate\n method to perform the actual computation:\n\n\nA.evaluate();  // Perform the computation defined previously for output tensor A\n\n\n\n\nUnder the hood, when you invoke the \nevaluate\n method, taco first invokes the output tensor's \ncompile\n method to generate kernels that assembles the output indices (if the tensor contains any sparse dimensions) and that performs the actual computation. taco would then call the two generated kernels by invoking the output tensor's \nassemble\n and \ncompute\n methods. You can manually invoke these methods instead of calling \nevaluate\n as demonstrated below:\n\n\nA.compile();   // Generate output assembly and compute kernels \nA.assemble();  // Invoke the output assembly kernel to assemble the output indices\nA.compute();   // Invoke the compute kernel to perform the actual computation\n\n\n\n\nThis can be useful if you want to perform the same computation multiple times, in which case it suffices to invoke \ncompile\n once before the first time the computation is performed.",
            "title": "Computing on Tensors"
        },
        {
            "location": "/computations/#specifying-tensor-algebra-computations",
            "text": "Tensor algebra computations can be expressed in taco with tensor index notation, which on a high level describes how each element in the output tensor can be computed from elements in the input tensors. As an example, matrix addition can be expressed in index notation as   A(i,j) = B(i,j) + C(i,j)  where  A ,  B , and  C  denote order-2 tensors (i.e. matrices) while  i  and  j  are index variables that represent abstract indices into the corresponding dimensions of the tensors. In words, the example above essentially states that, for every  i  and  j , the element in the  i -th row and  j -th column of the  A  should be assigned the sum of the corresponding elements in  B  and  C . Similarly, element-wise multiplication of three order-3 tensors can be expressed in index notation as follows  A(i,j,k) = B(i,j,k) * C(i,j,k) * D(i,j,k)  The syntax shown above corresponds to exactly what you would have to write in C++ with the taco library to define tensor algebra computations. Note, however, that prior to defining a tensor algebra computation, all index variables have to be declared. This can be done as shown below:  IndexVar i, j, k;  // Declare index variables for previous example",
            "title": "Specifying Tensor Algebra Computations"
        },
        {
            "location": "/computations/#expressing-reductions",
            "text": "In both of the previous examples, all of the index variables are used to index into both the output and the inputs. However, it is possible for an index variable to be used to index into the inputs only, in which case the index variable is reduced (summed) over. For instance, the following example   y(i) = A(i,j) * x(j)  can be rewritten with the summation more explicit as  y(i) = \\sum_{j} A(i,j) \\cdot x(j)  and demonstrates how matrix-vector multiplication can be expressed in index notation.  Note that, in taco, reductions are assumed to be over the smallest subexpression that captures all uses of the corresponding reduction variable. For instance, the following computation   y(i) = A(i,j) * x(j) + z(i)  can be rewritten with the summation more explicit as    y(i) = \\big(\\sum_{j} A(i,j) \\cdot x(j)\\big) + z(i),   whereas the following computation   y(i) = A(i,j) * x(j) + z(j)  can be rewritten with the summation more explicit as    y(i) = \\sum_{j} \\big(A(i,j) \\cdot x(j) + z(i)\\big).",
            "title": "Expressing Reductions"
        },
        {
            "location": "/computations/#performing-the-computation",
            "text": "Once a tensor algebra computation has been defined (and all of the inputs have been  initialized ), you can simply invoke the output tensor's  evaluate  method to perform the actual computation:  A.evaluate();  // Perform the computation defined previously for output tensor A  Under the hood, when you invoke the  evaluate  method, taco first invokes the output tensor's  compile  method to generate kernels that assembles the output indices (if the tensor contains any sparse dimensions) and that performs the actual computation. taco would then call the two generated kernels by invoking the output tensor's  assemble  and  compute  methods. You can manually invoke these methods instead of calling  evaluate  as demonstrated below:  A.compile();   // Generate output assembly and compute kernels \nA.assemble();  // Invoke the output assembly kernel to assemble the output indices\nA.compute();   // Invoke the compute kernel to perform the actual computation  This can be useful if you want to perform the same computation multiple times, in which case it suffices to invoke  compile  once before the first time the computation is performed.",
            "title": "Performing the Computation"
        },
        {
            "location": "/scientific_computing/",
            "text": "Sparse matrix-vector multiplication (SpMV) is a bottleneck operation in many scientific and engineering computations. Mathematically, the operation demonstrated in this example can be expressed as \ny = \\alpha Ax + \\beta z\n, where \nx\n, \ny\n, and \nz\n are dense vectors, \nA\n is a sparse matrix, and \n\\alpha\n and \n\\beta\n are scalar values. This operation can also be expressed in index notation as \n\n\ny(i) = alpha * A(i,j) * x(j) + beta * z(i)\n\n\n\n\nYou can use the taco C++ library to easily and efficiently compute the SpMV as demonstrated here:\n\n\n// On Linux and MacOS, you can compile and run this program like so:\n//   g++ -std=c++11 -O3 -DNDEBUG -DTACO -I ../../include -L../../build/lib -ltaco spmv.cpp -o spmv\n//   LD_LIBRARY_PATH=../../build/lib ./spmv\n\n#include <random>\n\n#include \"taco.h\"\n\nusing namespace taco;\n\nint main(int argc, char* argv[]) {\n  std::default_random_engine gen(0);\n  std::uniform_real_distribution<double> unif(0.0, 1.0);\n\n  // Predeclare the storage formats that the inputs and output will be stored as.\n  // To define a format, you must specify whether each dimension is dense or sparse \n  // and (optionally) the order in which dimensions should be stored. The formats \n  // declared below correspond to compressed sparse row (csr) and dense vector (dv). \n  Format csr({Dense,Sparse});\n  Format  dv({Dense});\n\n  // Load a sparse matrix from file (stored in the Matrix Market format) and \n  // store it as a compressed sparse row matrix. Matrices correspond to order-2 \n  // tensors in taco.\n  Tensor<double> A = read(\"../data/pwtk.mtx\", csr);\n\n  // Generate a random dense vector and store it in the dense vector format. \n  // Vectors correspond to order-1 tensors in taco.\n  Tensor<double> x({A.getDimensions()[1]}, dv);\n  for (int i = 0; i < x.getDimensions()[0]; ++i) {\n    x.insert({i}, unif(gen));\n  }\n  x.pack();\n\n  // Generate another random dense vetor and store it in the dense vector format..\n  Tensor<double> z({A.getDimensions()[0]}, dv);\n  for (int i = 0; i < z.getDimensions()[0]; ++i) {\n    z.insert({i}, unif(gen));\n  }\n  z.pack();\n\n  // Declare and initializing the scaling factors in the SpMV computation. \n  // Scalars correspond to order-0 tensors in taco.\n  Tensor<double> alpha(42.0);\n  Tensor<double> beta(33.0);\n\n  // Declare the output matrix to be a sparse matrix with the same dimensions as \n  // input matrix B, to be also stored as a doubly compressed sparse row matrix.\n  Tensor<double> y({A.getDimensions()[0]}, dv);\n\n  // Define the SpMV computation using index notation.\n  IndexVar i, j;\n  y(i) = alpha() * (A(i,j) * x(j)) + beta() * z(i);\n\n  // At this point, we have defined how entries in the output vector should be \n  // computed from entries in the input matrice and vectorsbut have not actually \n  // performed the computation yet. To do so, we must first tell taco to generate \n  // code that can be executed to compute the SpMV operation.\n  y.compile();\n\n  // We can now call the functions taco generated to assemble the indices of the \n  // output vector and then actually compute the SpMV.\n  y.assemble();\n  y.compute();\n\n  // Write the output of the computation to file (stored in the FROSTT format).\n  write(\"y.tns\", y);\n}\n\n\n\n\nUnder the hood, when you run the above C++ program, taco generates the imperative code shown below to compute the SpMV. taco is able to evaluate this compound operation efficiently with a single kernel that avoids materializing the intermediate matrix-vector product.\n\n\nfor (int iA = 0; iA < 217918; iA++) {\n  double tj = 0;\n  for (int A2_pos = A.d2.pos[iA]; A2_pos < A.d2.pos[(iA + 1)]; A2_pos++) {\n    int jA = A.d2.idx[A2_pos];\n    tj += A.vals[A2_pos] * x.vals[jA];\n  }\n  y.vals[iA] = (alpha.vals[0] * tj) + (beta.vals[0] * z.vals[iA]);\n}",
            "title": "Scientific Computing: SpMV"
        },
        {
            "location": "/machine_learning/",
            "text": "Sampled dense-dense matrix product (SDDMM) is a bottleneck operation in many factor analysis algorithms used in machine learning, including Alternating \nLeast Squares and Latent Dirichlet Allocation [1]. Mathematically, the operation can be expressed as \nA = B \\circ CD\n, where \nA\n and \nB\n are sparse matrices, \nC\n and \nD\n are dense matrices, and \n\\circ\n denotes component-wise multiplication. This operation can also be expressed in index notation as \n\n\nA(i,j) = B(i,j) * C(i,k) * D(k,j)\n\n\n\n\nYou can use the taco C++ library to easily and efficiently compute the SDDMM as demonstrated here:\n\n\n// On Linux and MacOS, you can compile and run this program like so:\n//   g++ -std=c++11 -O3 -DNDEBUG -DTACO -I ../../include -L../../build/lib -ltaco sddmm.cpp -o sddmm\n//   LD_LIBRARY_PATH=../../build/lib ./sddmm\n\n#include <random>\n\n#include \"taco.h\"\n\nusing namespace taco;\n\nint main(int argc, char* argv[]) {\n  std::default_random_engine gen(0);\n  std::uniform_real_distribution<double> unif(0.0, 1.0);\n\n  // Predeclare the storage formats that the inputs and output will be stored as.\n  // To define a format, you must specify whether each dimension is dense or sparse \n  // and (optionally) the order in which dimensions should be stored. The formats \n  // declared below correspond to doubly compressed sparse row (dcsr), row-major \n  // dense (rm), and column-major dense (dm).\n  Format dcsr({Sparse,Sparse});\n  Format   rm({Dense,Dense});\n  Format   cm({Dense,Dense}, {1,0});\n\n  // Load a sparse matrix from file (stored in the Matrix Market format) and \n  // store it as a doubly compressed sparse row matrix. Matrices correspond to\n  // order-2 tensors in taco.\n  Tensor<double> B = read(\"../data/webbase.mtx\", dcsr);\n\n  // Generate a random dense matrix and store it in row-major (dense) format.\n  Tensor<double> C({B.getDimensions()[0], 1000}, rm);\n  for (int i = 0; i < C.getDimensions()[0]; ++i) {\n    for (int j = 0; j < C.getDimensions()[1]; ++j) {\n      C.insert({i,j}, unif(gen));\n    }\n  }\n  C.pack();\n\n  // Generate another random dense matrix and store it in column-major format.\n  Tensor<double> D({1000, B.getDimensions()[1]}, cm);\n  for (int i = 0; i < D.getDimensions()[0]; ++i) {\n    for (int j = 0; j < D.getDimensions()[1]; ++j) {\n      D.insert({i,j}, unif(gen));\n    }\n  }\n  D.pack();\n\n  // Declare the output matrix to be a sparse matrix with the same dimensions as \n  // input matrix B, to be also stored as a doubly compressed sparse row matrix.\n  Tensor<double> A(B.getDimensions(), dcsr);\n\n  // Define the SDDMM computation using index notation.\n  IndexVar i, j, k;\n  A(i,j) = B(i,j) * C(i,k) * D(k,j);\n\n  // At this point, we have defined how entries in the output matrix should be \n  // computed from entries in the input matrices but have not actually performed \n  // the computation yet. To do so, we must first tell taco to generate code that \n  // can be executed to compute the SDDMM operation.\n  A.compile();\n\n  // We can now call the functions taco generated to assemble the indices of the \n  // output matrix and then actually compute the SDDMM.\n  A.assemble();\n  A.compute();\n\n  // Write the output of the computation to file (stored in the Matrix Market format).\n  write(\"A.mtx\", A);\n}\n\n\n\n\nUnder the hood, when you run the above C++ program, taco generates the imperative code shown below to compute the SDDMM. taco is able to do this efficiently by only computing entries of the intermediate matrix product that are actually needed to compute the output tensor \nA\n.\n\n\nint A1_pos = A.d1.pos[0];\nint A2_pos = A.d2.pos[A1_pos];\nfor (int B1_pos = B.d1.pos[0]; B1_pos < B.d1.pos[(0 + 1)]; B1_pos++) {\n  int iB = B.d1.idx[B1_pos];\n  for (int B2_pos = B.d2.pos[B1_pos]; B2_pos < B.d2.pos[(B1_pos + 1)]; B2_pos++) {\n    int jB = B.d2.idx[B2_pos];\n    double tk = 0;\n    for (int kC = 0; kC < 1000; kC++) {\n      int C2_pos = (iB * 1000) + kC;\n      int D2_pos = (jB * 1000) + kC;\n      tk += (B.vals[B2_pos] * C.vals[C2_pos]) * D.vals[D2_pos];\n    }\n    A.vals[A2_pos] = tk;\n    A2_pos++;\n  }\n  if (A.d2.pos[(A1_pos + 1)] > A.d2.pos[A1_pos]) A1_pos++;\n}\n\n\n\n\n[1] Huasha Zhao. 2014. High Performance Machine Learning through Codesign and Rooflining. Ph.D. Dissertation. EECS Department, University of California, Berkeley.",
            "title": "Machine Learning: SDDMM"
        },
        {
            "location": "/data_analytics/",
            "text": "Matricized tensor times Khatri-Rao product (MTTKRP) is a bottleneck operation in various algorithms - such as Alternating Least Squares - for computing sparse tensor factorizations like the Canonical Polyadic Decomposition. Mathematically, mode-1 MTTKRP (for order-3 tensors) can be expressed as \nA = B_{(1)} (D \\odot C)\n, where \nA\n, \nC\n, and \nD\n are (typically) dense matrices, \nB\n is an order-3 tensor (matricizied along the first mode), and \n\\odot\n denotes the Khatri-Rao product. This operation can also be expressed in index notation as \n\n\nA(i,j) = B(i,k,l) * D(l,j) * C(k,j)\n\n\n\n\nYou can use the taco C++ library to easily and efficiently compute the MTTKRP as demonstrated here:\n\n\n// On Linux and MacOS, you can compile and run this program like so:\n//   g++ -std=c++11 -O3 -DNDEBUG -DTACO -I ../../include -L../../build/lib -ltaco mttkrp.cpp -o mttkrp\n//   LD_LIBRARY_PATH=../../build/lib ./mttkrp\n\n#include <random>\n\n#include \"taco.h\"\n\nusing namespace taco;\n\nint main(int argc, char* argv[]) {\n  std::default_random_engine gen(0);\n  std::uniform_real_distribution<double> unif(0.0, 1.0);\n\n  // Predeclare the storage formats that the inputs and output will be stored as.\n  // To define a format, you must specify whether each dimension is dense or \n  // sparse and (optionally) the order in which dimensions should be stored. The \n  // formats declared below correspond to compressed sparse fiber (csf) and \n  // row-major dense (rm).\n  Format csf({Sparse,Sparse,Sparse});\n  Format  rm({Dense,Dense});\n\n  // Load a sparse order-3 tensor from file (stored in the FROSTT format) and \n  // store it as a compressed sparse fiber tensor.\n  Tensor<double> B = read(\"../data/facebook.tns\", csf);\n\n  // Generate a random dense matrix and store it in row-major (dense) format. \n  // Matrices correspond to order-2 tensors in taco.\n  Tensor<double> C({B.getDimensions()[1], 25}, rm);\n  for (int i = 0; i < C.getDimensions()[0]; ++i) {\n    for (int j = 0; j < C.getDimensions()[1]; ++j) {\n      C.insert({i,j}, unif(gen));\n    }\n  }\n  C.pack();\n\n  // Generate another random dense matrix and store it in row-major format.\n  Tensor<double> D({B.getDimensions()[2], 25}, rm);\n  for (int i = 0; i < D.getDimensions()[0]; ++i) {\n    for (int j = 0; j < D.getDimensions()[1]; ++j) {\n      D.insert({i,j}, unif(gen));\n    }\n  }\n  D.pack();\n\n  // Declare the output matrix to be a dense matrix with 25 columns and the same \n  // number of rows as the number of slices along the first dimension of input \n  // tensor B, to be also stored as a row-major dense matrix.\n  Tensor<double> A({B.getDimensions()[0], 25}, rm);\n\n  // Define the MTTKRP computation using index notation.\n  IndexVar i, j, k, l;\n  A(i,j) = B(i,k,l) * D(l,j) * C(k,j);\n\n  // At this point, we have defined how entries in the output matrix should be \n  // computed from entries in the input tensor and matrices but have not actually \n  // performed the computation yet. To do so, we must first tell taco to generate \n  // code that can be executed to compute the MTTKRP operation.\n  A.compile();\n\n  // We can now call the functions taco generated to assemble the indices of the \n  // output matrix and then actually compute the MTTKRP.\n  A.assemble();\n  A.compute();\n\n  // Write the output of the computation to file (stored in the FROSTT format).\n  write(\"A.tns\", A);\n}\n\n\n\n\nUnder the hood, when you run the above C++ program, taco generates the imperative code shown below to compute the MTTKRP. taco is able to evaluate this compound operation efficiently with a single kernel that avoids materializing the intermediate Khatri-Rao product.\n\n\nfor (int B1_pos = B.d1.pos[0]; B1_pos < B.d1.pos[(0 + 1)]; B1_pos++) {\n  int iB = B.d1.idx[B1_pos];\n  for (int B2_pos = B.d2.pos[B1_pos]; B2_pos < B.d2.pos[(B1_pos + 1)]; B2_pos++) {\n    int kB = B.d2.idx[B2_pos];\n    for (int B3_pos = B.d3.pos[B2_pos]; B3_pos < B.d3.pos[(B2_pos + 1)]; B3_pos++) {\n      int lB = B.d3.idx[B3_pos];\n      double t37 = B.vals[B3_pos];\n      for (int jD = 0; jD < 25; jD++) {\n        int D2_pos = (lB * 25) + jD;\n        int C2_pos = (kB * 25) + jD;\n        int A2_pos = (iB * 25) + jD;\n        A.vals[A2_pos] = A.vals[A2_pos] + ((t37 * D.vals[D2_pos]) * C.vals[C2_pos]);\n      }\n    }\n  }\n}",
            "title": "Data Analytics: MTTKRP"
        }
    ]
}